{
  "version": 3,
  "sources": ["../../numbro/dist/es/numbro.js"],
  "sourcesContent": ["var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction getDefaultExportFromCjs (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar enUS;\nvar hasRequiredEnUS;\n\nfunction requireEnUS () {\n\tif (hasRequiredEnUS) return enUS;\n\thasRequiredEnUS = 1;\n\tenUS = {\n\t    languageTag: \"en-US\",\n\t    delimiters: {\n\t        thousands: \",\",\n\t        decimal: \".\"\n\t    },\n\t    abbreviations: {\n\t        thousand: \"k\",\n\t        million: \"m\",\n\t        billion: \"b\",\n\t        trillion: \"t\"\n\t    },\n\t    spaceSeparated: false,\n\t    ordinal: function(number) {\n\t        let b = number % 10;\n\t        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n\t    },\n\t    bytes: {\n\t        binarySuffixes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"],\n\t        decimalSuffixes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t    },\n\t    currency: {\n\t        symbol: \"$\",\n\t        position: \"prefix\",\n\t        code: \"USD\"\n\t    },\n\t    currencyFormat: {\n\t        thousandSeparated: true,\n\t        totalLength: 4,\n\t        spaceSeparated: true,\n\t        spaceSeparatedCurrency: true\n\t    },\n\t    formats: {\n\t        fourDigits: {\n\t            totalLength: 4,\n\t            spaceSeparated: true\n\t        },\n\t        fullWithTwoDecimals: {\n\t            output: \"currency\",\n\t            thousandSeparated: true,\n\t            mantissa: 2\n\t        },\n\t        fullWithTwoDecimalsNoCurrency: {\n\t            thousandSeparated: true,\n\t            mantissa: 2\n\t        },\n\t        fullWithNoDecimals: {\n\t            output: \"currency\",\n\t            thousandSeparated: true,\n\t            mantissa: 0\n\t        }\n\t    }\n\t};\n\treturn enUS;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar unformatting;\nvar hasRequiredUnformatting;\n\nfunction requireUnformatting () {\n\tif (hasRequiredUnformatting) return unformatting;\n\thasRequiredUnformatting = 1;\n\tconst allSuffixes = [\n\t    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n\t    {key: \"ZB\", factor: Math.pow(1000, 7)},\n\t    {key: \"YiB\", factor: Math.pow(1024, 8)},\n\t    {key: \"YB\", factor: Math.pow(1000, 8)},\n\t    {key: \"TiB\", factor: Math.pow(1024, 4)},\n\t    {key: \"TB\", factor: Math.pow(1000, 4)},\n\t    {key: \"PiB\", factor: Math.pow(1024, 5)},\n\t    {key: \"PB\", factor: Math.pow(1000, 5)},\n\t    {key: \"MiB\", factor: Math.pow(1024, 2)},\n\t    {key: \"MB\", factor: Math.pow(1000, 2)},\n\t    {key: \"KiB\", factor: Math.pow(1024, 1)},\n\t    {key: \"KB\", factor: Math.pow(1000, 1)},\n\t    {key: \"GiB\", factor: Math.pow(1024, 3)},\n\t    {key: \"GB\", factor: Math.pow(1000, 3)},\n\t    {key: \"EiB\", factor: Math.pow(1024, 6)},\n\t    {key: \"EB\", factor: Math.pow(1000, 6)},\n\t    {key: \"B\", factor: 1}\n\t];\n\n\t/**\n\t * Generate a RegExp where S get all RegExp specific characters escaped.\n\t *\n\t * @param {string} s - string representing a RegExp\n\t * @return {string}\n\t */\n\tfunction escapeRegExp(s) {\n\t    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n\t}\n\n\t/**\n\t * Recursively compute the unformatted value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {*} delimiters - Delimiters used to generate the inputString\n\t * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n\t * @param {function} ordinal - function used to generate an ordinal out of a number\n\t * @param {string} zeroFormat - string representing zero\n\t * @param {*} abbreviations - abbreviations used while generating the inputString\n\t * @param {NumbroFormat} format - format used while generating the inputString\n\t * @return {number|undefined}\n\t */\n\tfunction computeUnformattedValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) {\n\t    if (!isNaN(+inputString)) {\n\t        return +inputString;\n\t    }\n\n\t    let stripped = \"\";\n\t    // Negative\n\n\t    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n\t    if (newInput !== inputString) {\n\t        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t    }\n\n\t    // Byte\n\n\t    for (let i = 0; i < allSuffixes.length; i++) {\n\t        let suffix = allSuffixes[i];\n\t        stripped = inputString.replace(RegExp(`([0-9 ])(${suffix.key})$`), \"$1\");\n\n\t        if (stripped !== inputString) {\n\t            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) * suffix.factor;\n\t        }\n\t    }\n\n\t    // Percent\n\n\t    stripped = inputString.replace(\"%\", \"\");\n\n\t    if (stripped !== inputString) {\n\t        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) / 100;\n\t    }\n\n\t    // Ordinal\n\n\t    let possibleOrdinalValue = parseFloat(inputString);\n\n\t    if (isNaN(possibleOrdinalValue)) {\n\t        return undefined;\n\t    }\n\n\t    let ordinalString = ordinal(possibleOrdinalValue);\n\t    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n\t        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n\t        if (stripped !== inputString) {\n\t            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t        }\n\t    }\n\n\t    // Average\n\n\t    let inversedAbbreviations = {};\n\t    Object.keys(abbreviations).forEach((key) => {\n\t        inversedAbbreviations[abbreviations[key]] = key;\n\t    });\n\n\t    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n\t    let numberOfAbbreviations = abbreviationValues.length;\n\n\t    for (let i = 0; i < numberOfAbbreviations; i++) {\n\t        let value = abbreviationValues[i];\n\t        let key = inversedAbbreviations[value];\n\n\t        stripped = inputString.replace(value, \"\");\n\t        if (stripped !== inputString) {\n\t            let factor = undefined;\n\t            switch (key) { // eslint-disable-line default-case\n\t                case \"thousand\":\n\t                    factor = Math.pow(10, 3);\n\t                    break;\n\t                case \"million\":\n\t                    factor = Math.pow(10, 6);\n\t                    break;\n\t                case \"billion\":\n\t                    factor = Math.pow(10, 9);\n\t                    break;\n\t                case \"trillion\":\n\t                    factor = Math.pow(10, 12);\n\t                    break;\n\t            }\n\t            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations) * factor;\n\t        }\n\t    }\n\n\t    return undefined;\n\t}\n\n\t/**\n\t * Removes in one pass all formatting symbols.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {*} delimiters - Delimiters used to generate the inputString\n\t * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n\t * @return {string}\n\t */\n\tfunction removeFormattingSymbols(inputString, delimiters, currencySymbol) {\n\t    // Currency\n\n\t    let stripped = inputString.replace(currencySymbol, \"\");\n\n\t    // Thousand separators\n\n\t    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n\t    // Decimal\n\n\t    stripped = stripped.replace(delimiters.decimal, \".\");\n\n\t    return stripped;\n\t}\n\n\t/**\n\t * Unformat a numbro-generated string to retrieve the original value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {*} delimiters - Delimiters used to generate the inputString\n\t * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n\t * @param {function} ordinal - function used to generate an ordinal out of a number\n\t * @param {string} zeroFormat - string representing zero\n\t * @param {*} abbreviations - abbreviations used while generating the inputString\n\t * @param {NumbroFormat} format - format used while generating the inputString\n\t * @return {number|undefined}\n\t */\n\tfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n\t    if (inputString === \"\") {\n\t        return undefined;\n\t    }\n\n\t    // Zero Format\n\n\t    if (inputString === zeroFormat) {\n\t        return 0;\n\t    }\n\n\t    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n\t    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t}\n\n\t/**\n\t * Check if the INPUTSTRING represents a time.\n\t *\n\t * @param {string} inputString - string to check\n\t * @param {*} delimiters - Delimiters used while generating the inputString\n\t * @return {boolean}\n\t */\n\tfunction matchesTime(inputString, delimiters) {\n\t    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n\t    if (!separators) {\n\t        return false;\n\t    }\n\n\t    let segments = inputString.split(\":\");\n\t    if (segments.length !== 3) {\n\t        return false;\n\t    }\n\n\t    let hours = +segments[0];\n\t    let minutes = +segments[1];\n\t    let seconds = +segments[2];\n\n\t    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n\t}\n\n\t/**\n\t * Unformat a numbro-generated string representing a time to retrieve the original value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @return {number}\n\t */\n\tfunction unformatTime(inputString) {\n\t    let segments = inputString.split(\":\");\n\n\t    let hours = +segments[0];\n\t    let minutes = +segments[1];\n\t    let seconds = +segments[2];\n\n\t    return seconds + 60 * minutes + 3600 * hours;\n\t}\n\n\t/**\n\t * Unformat a numbro-generated string to retrieve the original value.\n\t *\n\t * @param {string} inputString - string to unformat\n\t * @param {NumbroFormat} format - format used  while generating the inputString\n\t * @return {number}\n\t */\n\tfunction unformat(inputString, format) {\n\t    // Avoid circular references\n\t    const globalState = requireGlobalState();\n\n\t    let delimiters = globalState.currentDelimiters();\n\t    let currencySymbol = globalState.currentCurrency().symbol;\n\t    let ordinal = globalState.currentOrdinal();\n\t    let zeroFormat = globalState.getZeroFormat();\n\t    let abbreviations = globalState.currentAbbreviations();\n\n\t    let value = undefined;\n\n\t    if (typeof inputString === \"string\") {\n\t        if (matchesTime(inputString, delimiters)) {\n\t            value = unformatTime(inputString);\n\t        } else {\n\t            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations);\n\t        }\n\t    } else if (typeof inputString === \"number\") {\n\t        value = inputString;\n\t    } else {\n\t        return undefined;\n\t    }\n\n\t    if (value === undefined) {\n\t        return undefined;\n\t    }\n\n\t    return value;\n\t}\n\n\tunformatting = {\n\t    unformat\n\t};\n\treturn unformatting;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar validating$1;\nvar hasRequiredValidating;\n\nfunction requireValidating () {\n\tif (hasRequiredValidating) return validating$1;\n\thasRequiredValidating = 1;\n\tlet unformatter = requireUnformatting();\n\n\t// Simplified regexp supporting only `language`, `script`, and `region`\n\tconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\n\tconst validOutputValues = [\n\t    \"currency\",\n\t    \"percent\",\n\t    \"byte\",\n\t    \"time\",\n\t    \"ordinal\",\n\t    \"number\"\n\t];\n\n\tconst validForceAverageValues = [\n\t    \"trillion\",\n\t    \"billion\",\n\t    \"million\",\n\t    \"thousand\"\n\t];\n\n\tconst validCurrencyPosition = [\n\t    \"prefix\",\n\t    \"infix\",\n\t    \"postfix\"\n\t];\n\n\tconst validNegativeValues = [\n\t    \"sign\",\n\t    \"parenthesis\"\n\t];\n\n\tconst validMandatoryAbbreviations = {\n\t    type: \"object\",\n\t    children: {\n\t        thousand: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        },\n\t        million: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        },\n\t        billion: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        },\n\t        trillion: {\n\t            type: \"string\",\n\t            mandatory: true\n\t        }\n\t    },\n\t    mandatory: true\n\t};\n\n\tconst validAbbreviations = {\n\t    type: \"object\",\n\t    children: {\n\t        thousand: \"string\",\n\t        million: \"string\",\n\t        billion: \"string\",\n\t        trillion: \"string\"\n\t    }\n\t};\n\n\tconst validBaseValues = [\n\t    \"decimal\",\n\t    \"binary\",\n\t    \"general\"\n\t];\n\n\tconst validFormat = {\n\t    output: {\n\t        type: \"string\",\n\t        validValues: validOutputValues\n\t    },\n\t    base: {\n\t        type: \"string\",\n\t        validValues: validBaseValues,\n\t        restriction: (number, format) => format.output === \"byte\",\n\t        message: \"`base` must be provided only when the output is `byte`\",\n\t        mandatory: (format) => format.output === \"byte\"\n\t    },\n\t    characteristic: {\n\t        type: \"number\",\n\t        restriction: (number) => number >= 0,\n\t        message: \"value must be positive\"\n\t    },\n\t    prefix: \"string\",\n\t    postfix: \"string\",\n\t    forceAverage: {\n\t        type: \"string\",\n\t        validValues: validForceAverageValues\n\t    },\n\t    average: \"boolean\",\n\t    lowPrecision: {\n\t        type: \"boolean\",\n\t        restriction: (number, format) => format.average === true,\n\t        message: \"`lowPrecision` must be provided only when the option `average` is set\"\n\t    },\n\t    currencyPosition: {\n\t        type: \"string\",\n\t        validValues: validCurrencyPosition\n\t    },\n\t    currencySymbol: \"string\",\n\t    totalLength: {\n\t        type: \"number\",\n\t        restrictions: [\n\t            {\n\t                restriction: (number) => number >= 0,\n\t                message: \"value must be positive\"\n\t            },\n\t            {\n\t                restriction: (number, format) => !format.exponential,\n\t                message: \"`totalLength` is incompatible with `exponential`\"\n\t            }\n\t        ]\n\t    },\n\t    mantissa: {\n\t        type: \"number\",\n\t        restriction: (number) => number >= 0,\n\t        message: \"value must be positive\"\n\t    },\n\t    optionalMantissa: \"boolean\",\n\t    trimMantissa: \"boolean\",\n\t    roundingFunction: \"function\",\n\t    optionalCharacteristic: \"boolean\",\n\t    thousandSeparated: \"boolean\",\n\t    spaceSeparated: \"boolean\",\n\t    spaceSeparatedCurrency: \"boolean\",\n\t    spaceSeparatedAbbreviation: \"boolean\",\n\t    abbreviations: validAbbreviations,\n\t    negative: {\n\t        type: \"string\",\n\t        validValues: validNegativeValues\n\t    },\n\t    forceSign: \"boolean\",\n\t    exponential: {\n\t        type: \"boolean\"\n\t    },\n\t    prefixSymbol: {\n\t        type: \"boolean\",\n\t        restriction: (number, format) => format.output === \"percent\",\n\t        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n\t    }\n\t};\n\n\tconst validLanguage = {\n\t    languageTag: {\n\t        type: \"string\",\n\t        mandatory: true,\n\t        restriction: (tag) => {\n\t            return tag.match(bcp47RegExp);\n\t        },\n\t        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n\t    },\n\t    delimiters: {\n\t        type: \"object\",\n\t        children: {\n\t            thousands: \"string\",\n\t            decimal: \"string\",\n\t            thousandsSize: \"number\"\n\t        },\n\t        mandatory: true\n\t    },\n\t    abbreviations: validMandatoryAbbreviations,\n\t    spaceSeparated: \"boolean\",\n\t    spaceSeparatedCurrency: \"boolean\",\n\t    ordinal: {\n\t        type: \"function\",\n\t        mandatory: true\n\t    },\n\t    bytes: {\n\t        type: \"object\",\n\t        children: {\n\t            binarySuffixes: \"object\",\n\t            decimalSuffixes: \"object\"\n\t        }\n\t    },\n\t    currency: {\n\t        type: \"object\",\n\t        children: {\n\t            symbol: \"string\",\n\t            position: \"string\",\n\t            code: \"string\"\n\t        },\n\t        mandatory: true\n\t    },\n\t    defaults: \"format\",\n\t    ordinalFormat: \"format\",\n\t    byteFormat: \"format\",\n\t    percentageFormat: \"format\",\n\t    currencyFormat: \"format\",\n\t    timeDefaults: \"format\",\n\t    formats: {\n\t        type: \"object\",\n\t        children: {\n\t            fourDigits: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            },\n\t            fullWithTwoDecimals: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            },\n\t            fullWithTwoDecimalsNoCurrency: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            },\n\t            fullWithNoDecimals: {\n\t                type: \"format\",\n\t                mandatory: true\n\t            }\n\t        }\n\t    }\n\t};\n\n\t/**\n\t * Check the validity of the provided input and format.\n\t * The check is NOT lazy.\n\t *\n\t * @param {string|number|Numbro} input - input to check\n\t * @param {NumbroFormat} format - format to check\n\t * @return {boolean} True when everything is correct\n\t */\n\tfunction validate(input, format) {\n\t    let validInput = validateInput(input);\n\t    let isFormatValid = validateFormat(format);\n\n\t    return validInput && isFormatValid;\n\t}\n\n\t/**\n\t * Check the validity of the numbro input.\n\t *\n\t * @param {string|number|Numbro} input - input to check\n\t * @return {boolean} True when everything is correct\n\t */\n\tfunction validateInput(input) {\n\t    let value = unformatter.unformat(input);\n\n\t    return value !== undefined;\n\t}\n\n\t/**\n\t * Check the validity of the provided format TOVALIDATE against SPEC.\n\t *\n\t * @param {NumbroFormat} toValidate - format to check\n\t * @param {*} spec - specification against which to check\n\t * @param {string} prefix - prefix use for error messages\n\t * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n\t * @return {boolean} True when everything is correct\n\t */\n\tfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n\t    let results = Object.keys(toValidate).map((key) => {\n\t        if (!spec[key]) {\n\t            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        let value = toValidate[key];\n\t        let data = spec[key];\n\n\t        if (typeof data === \"string\") {\n\t            data = {type: data};\n\t        }\n\n\t        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n\t            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n\t            if (!valid) {\n\t                return false;\n\t            }\n\t        } else if (typeof value !== data.type) {\n\t            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        if (data.restrictions && data.restrictions.length) {\n\t            let length = data.restrictions.length;\n\t            for (let i = 0; i < length; i++) {\n\t                let {restriction, message} = data.restrictions[i];\n\t                if (!restriction(value, toValidate)) {\n\t                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\n\t        if (data.restriction && !data.restriction(value, toValidate)) {\n\t            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        if (data.validValues && data.validValues.indexOf(value) === -1) {\n\t            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n\t            return false;\n\t        }\n\n\t        if (data.children) {\n\t            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n\t            if (!valid) {\n\t                return false;\n\t            }\n\t        }\n\n\t        return true;\n\t    });\n\n\t    if (!skipMandatoryCheck) {\n\t        results.push(...Object.keys(spec).map((key) => {\n\t            let data = spec[key];\n\t            if (typeof data === \"string\") {\n\t                data = {type: data};\n\t            }\n\n\t            if (data.mandatory) {\n\t                let mandatory = data.mandatory;\n\t                if (typeof mandatory === \"function\") {\n\t                    mandatory = mandatory(toValidate);\n\t                }\n\n\t                if (mandatory && toValidate[key] === undefined) {\n\t                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }));\n\t    }\n\n\t    return results.reduce((acc, current) => {\n\t        return acc && current;\n\t    }, true);\n\t}\n\n\t/**\n\t * Check the provided FORMAT.\n\t *\n\t * @param {NumbroFormat} format - format to check\n\t * @return {boolean}\n\t */\n\tfunction validateFormat(format) {\n\t    return validateSpec(format, validFormat, \"[Validate format]\");\n\t}\n\n\t/**\n\t * Check the provided LANGUAGE.\n\t *\n\t * @param {NumbroLanguage} language - language to check\n\t * @return {boolean}\n\t */\n\tfunction validateLanguage(language) {\n\t    return validateSpec(language, validLanguage, \"[Validate language]\");\n\t}\n\n\tvalidating$1 = {\n\t    validate,\n\t    validateFormat,\n\t    validateInput,\n\t    validateLanguage\n\t};\n\treturn validating$1;\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n        result.spaceSeparatedCurrency = true;\n\n        if (result.average || result.forceAverage) {\n            result.spaceSeparatedAbbreviation = true;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for a trimmed mantissa. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseTrimMantissa(string, result) {\n    const mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        result.trimMantissa = mantissa.indexOf(\"[\") !== -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseTrimMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nvar parsing$2 = {\n    parseFormat\n};\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nvar globalState$2;\nvar hasRequiredGlobalState;\n\nfunction requireGlobalState () {\n\tif (hasRequiredGlobalState) return globalState$2;\n\thasRequiredGlobalState = 1;\n\tconst enUS = requireEnUS();\n\tconst validating = requireValidating();\n\tconst parsing = parsing$2;\n\n\tlet state = {};\n\n\tlet currentLanguageTag = undefined;\n\tlet languages = {};\n\n\tlet zeroFormat = null;\n\n\tlet globalDefaults = {};\n\n\tfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\n\tfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n\t/**\n\t * Return all the register languages\n\t *\n\t * @return {{}}\n\t */\n\tstate.languages = () => Object.assign({}, languages);\n\n\t//\n\t// Current language accessors\n\t//\n\n\t/**\n\t * Return the current language tag\n\t *\n\t * @return {string}\n\t */\n\tstate.currentLanguage = () => currentLanguageTag;\n\n\t/**\n\t * Return the current language bytes data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentBytes = () => currentLanguageData().bytes || {};\n\n\t/**\n\t * Return the current language currency data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentCurrency = () => currentLanguageData().currency;\n\n\t/**\n\t * Return the current language abbreviations data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n\t/**\n\t * Return the current language delimiters data\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n\t/**\n\t * Return the current language ordinal function\n\t *\n\t * @return {function}\n\t */\n\tstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n\t//\n\t// Defaults\n\t//\n\n\t/**\n\t * Return the current formatting defaults.\n\t * First use the current language default, then fallback to the globally defined defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n\t/**\n\t * Return the ordinal default-format.\n\t * First use the current language ordinal default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n\t/**\n\t * Return the byte default-format.\n\t * First use the current language byte default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n\t/**\n\t * Return the percentage default-format.\n\t * First use the current language percentage default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n\t/**\n\t * Return the currency default-format.\n\t * First use the current language currency default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n\t/**\n\t * Return the time default-format.\n\t * First use the current language currency default, then fallback to the regular defaults.\n\t *\n\t * @return {{}}\n\t */\n\tstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n\t/**\n\t * Set the global formatting defaults.\n\t *\n\t * @param {{}|string} format - formatting options to use as defaults\n\t */\n\tstate.setDefaults = (format) => {\n\t    format = parsing.parseFormat(format);\n\t    if (validating.validateFormat(format)) {\n\t        globalDefaults = format;\n\t    }\n\t};\n\n\t//\n\t// Zero format\n\t//\n\n\t/**\n\t * Return the format string for 0.\n\t *\n\t * @return {string}\n\t */\n\tstate.getZeroFormat = () => zeroFormat;\n\n\t/**\n\t * Set a STRING to output when the value is 0.\n\t *\n\t * @param {{}|string} string - string to set\n\t */\n\tstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n\t/**\n\t * Return true if a format for 0 has been set already.\n\t *\n\t * @return {boolean}\n\t */\n\tstate.hasZeroFormat = () => zeroFormat !== null;\n\n\t//\n\t// Getters/Setters\n\t//\n\n\t/**\n\t * Return the language data for the provided TAG.\n\t * Return the current language data if no tag is provided.\n\t *\n\t * Throw an error if the tag doesn't match any registered language.\n\t *\n\t * @param {string} [tag] - language tag of a registered language\n\t * @return {{}}\n\t */\n\tstate.languageData = (tag) => {\n\t    if (tag) {\n\t        if (languages[tag]) {\n\t            return languages[tag];\n\t        }\n\t        throw new Error(`Unknown tag \"${tag}\"`);\n\t    }\n\n\t    return currentLanguageData();\n\t};\n\n\t/**\n\t * Register the provided DATA as a language if and only if the data is valid.\n\t * If the data is not valid, an error is thrown.\n\t *\n\t * When USELANGUAGE is true, the registered language is then used.\n\t *\n\t * @param {{}} data - language data to register\n\t * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n\t */\n\tstate.registerLanguage = (data, useLanguage = false) => {\n\t    if (!validating.validateLanguage(data)) {\n\t        throw new Error(\"Invalid language data\");\n\t    }\n\n\t    languages[data.languageTag] = data;\n\n\t    if (useLanguage) {\n\t        chooseLanguage(data.languageTag);\n\t    }\n\t};\n\n\t/**\n\t * Set the current language according to TAG.\n\t * If TAG doesn't match a registered language, another language matching\n\t * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n\t * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n\t * `en-US` is finally used.\n\t *\n\t * @param tag\n\t * @param fallbackTag\n\t */\n\tstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n\t    if (!languages[tag]) {\n\t        let suffix = tag.split(\"-\")[0];\n\n\t        let matchingLanguageTag = Object.keys(languages).find(each => {\n\t            return each.split(\"-\")[0] === suffix;\n\t        });\n\n\t        if (!languages[matchingLanguageTag]) {\n\t            chooseLanguage(fallbackTag);\n\t            return;\n\t        }\n\n\t        chooseLanguage(matchingLanguageTag);\n\t        return;\n\t    }\n\n\t    chooseLanguage(tag);\n\t};\n\n\tstate.registerLanguage(enUS);\n\tcurrentLanguageTag = enUS.languageTag;\n\n\tglobalState$2 = state;\n\treturn globalState$2;\n}\n\nfunction commonjsRequire(path) {\n\tthrow new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = commonjsRequire(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nvar loading = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n\nvar bignumber = {exports: {}};\n\n(function (module) {\n(function (globalObject) {\r\n\r\n\t/*\r\n\t *      bignumber.js v9.1.2\r\n\t *      A JavaScript library for arbitrary-precision arithmetic.\r\n\t *      https://github.com/MikeMcl/bignumber.js\r\n\t *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n\t *      MIT Licensed.\r\n\t *\r\n\t *      BigNumber.prototype methods     |  BigNumber methods\r\n\t *                                      |\r\n\t *      absoluteValue            abs    |  clone\r\n\t *      comparedTo                      |  config               set\r\n\t *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n\t *      dividedBy                div    |      ROUNDING_MODE\r\n\t *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n\t *      exponentiatedBy          pow    |      RANGE\r\n\t *      integerValue                    |      CRYPTO\r\n\t *      isEqualTo                eq     |      MODULO_MODE\r\n\t *      isFinite                        |      POW_PRECISION\r\n\t *      isGreaterThan            gt     |      FORMAT\r\n\t *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n\t *      isInteger                       |  isBigNumber\r\n\t *      isLessThan               lt     |  maximum              max\r\n\t *      isLessThanOrEqualTo      lte    |  minimum              min\r\n\t *      isNaN                           |  random\r\n\t *      isNegative                      |  sum\r\n\t *      isPositive                      |\r\n\t *      isZero                          |\r\n\t *      minus                           |\r\n\t *      modulo                   mod    |\r\n\t *      multipliedBy             times  |\r\n\t *      negated                         |\r\n\t *      plus                            |\r\n\t *      precision                sd     |\r\n\t *      shiftedBy                       |\r\n\t *      squareRoot               sqrt   |\r\n\t *      toExponential                   |\r\n\t *      toFixed                         |\r\n\t *      toFormat                        |\r\n\t *      toFraction                      |\r\n\t *      toJSON                          |\r\n\t *      toNumber                        |\r\n\t *      toPrecision                     |\r\n\t *      toString                        |\r\n\t *      valueOf                         |\r\n\t *\r\n\t */\r\n\r\n\r\n\t  var BigNumber,\r\n\t    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\t    mathceil = Math.ceil,\r\n\t    mathfloor = Math.floor,\r\n\r\n\t    bignumberError = '[BigNumber Error] ',\r\n\t    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n\t    BASE = 1e14,\r\n\t    LOG_BASE = 14,\r\n\t    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n\t    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n\t    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n\t    SQRT_BASE = 1e7,\r\n\r\n\t    // EDITABLE\r\n\t    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n\t    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n\t    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n\t  /*\r\n\t   * Create and return a BigNumber constructor.\r\n\t   */\r\n\t  function clone(configObject) {\r\n\t    var div, convertBase, parseNumeric,\r\n\t      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n\t      ONE = new BigNumber(1),\r\n\r\n\r\n\t      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n\t      // The default values below must be integers within the inclusive ranges stated.\r\n\t      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n\t      // The maximum number of decimal places for operations involving division.\r\n\t      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n\t      // The rounding mode used when rounding to the above decimal places, and when using\r\n\t      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n\t      // UP         0 Away from zero.\r\n\t      // DOWN       1 Towards zero.\r\n\t      // CEIL       2 Towards +Infinity.\r\n\t      // FLOOR      3 Towards -Infinity.\r\n\t      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n\t      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n\t      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n\t      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n\t      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n\t      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n\t      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n\t      // The exponent value at and beneath which toString returns exponential notation.\r\n\t      // Number type: -7\r\n\t      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n\t      // The exponent value at and above which toString returns exponential notation.\r\n\t      // Number type: 21\r\n\t      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n\t      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n\t      // The minimum exponent value, beneath which underflow to zero occurs.\r\n\t      // Number type: -324  (5e-324)\r\n\t      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n\t      // The maximum exponent value, above which overflow to Infinity occurs.\r\n\t      // Number type:  308  (1.7976931348623157e+308)\r\n\t      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n\t      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n\t      // Whether to use cryptographically-secure random number generation, if available.\r\n\t      CRYPTO = false,                          // true or false\r\n\r\n\t      // The modulo mode used when calculating the modulus: a mod n.\r\n\t      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n\t      // The remainder (r) is calculated as: r = a - n * q.\r\n\t      //\r\n\t      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n\t      // DOWN      1 The remainder has the same sign as the dividend.\r\n\t      //             This modulo mode is commonly known as 'truncated division' and is\r\n\t      //             equivalent to (a % n) in JavaScript.\r\n\t      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n\t      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n\t      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n\t      //             The remainder is always positive.\r\n\t      //\r\n\t      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n\t      // modes are commonly used for the modulus operation.\r\n\t      // Although the other rounding modes can also be used, they may not give useful results.\r\n\t      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n\t      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n\t      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n\t      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n\t      // The format specification used by the BigNumber.prototype.toFormat method.\r\n\t      FORMAT = {\r\n\t        prefix: '',\r\n\t        groupSize: 3,\r\n\t        secondaryGroupSize: 0,\r\n\t        groupSeparator: ',',\r\n\t        decimalSeparator: '.',\r\n\t        fractionGroupSize: 0,\r\n\t        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n\t        suffix: ''\r\n\t      },\r\n\r\n\t      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n\t      // '-', '.', whitespace, or repeated character.\r\n\t      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n\t      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n\t      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n\t    //------------------------------------------------------------------------------------------\r\n\r\n\r\n\t    // CONSTRUCTOR\r\n\r\n\r\n\t    /*\r\n\t     * The BigNumber constructor and exported function.\r\n\t     * Create and return a new instance of a BigNumber object.\r\n\t     *\r\n\t     * v {number|string|BigNumber} A numeric value.\r\n\t     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n\t     */\r\n\t    function BigNumber(v, b) {\r\n\t      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n\t        x = this;\r\n\r\n\t      // Enable constructor call without `new`.\r\n\t      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n\t      if (b == null) {\r\n\r\n\t        if (v && v._isBigNumber === true) {\r\n\t          x.s = v.s;\r\n\r\n\t          if (!v.c || v.e > MAX_EXP) {\r\n\t            x.c = x.e = null;\r\n\t          } else if (v.e < MIN_EXP) {\r\n\t            x.c = [x.e = 0];\r\n\t          } else {\r\n\t            x.e = v.e;\r\n\t            x.c = v.c.slice();\r\n\t          }\r\n\r\n\t          return;\r\n\t        }\r\n\r\n\t        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n\t          // Use `1 / n` to handle minus zero also.\r\n\t          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n\t          // Fast path for integers, where n < 2147483648 (2**31).\r\n\t          if (v === ~~v) {\r\n\t            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n\t            if (e > MAX_EXP) {\r\n\t              x.c = x.e = null;\r\n\t            } else {\r\n\t              x.e = e;\r\n\t              x.c = [v];\r\n\t            }\r\n\r\n\t            return;\r\n\t          }\r\n\r\n\t          str = String(v);\r\n\t        } else {\r\n\r\n\t          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n\t          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n\t        }\r\n\r\n\t        // Decimal point?\r\n\t        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n\t        // Exponential form?\r\n\t        if ((i = str.search(/e/i)) > 0) {\r\n\r\n\t          // Determine exponent.\r\n\t          if (e < 0) e = i;\r\n\t          e += +str.slice(i + 1);\r\n\t          str = str.substring(0, i);\r\n\t        } else if (e < 0) {\r\n\r\n\t          // Integer.\r\n\t          e = str.length;\r\n\t        }\r\n\r\n\t      } else {\r\n\r\n\t        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n\t        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n\t        // Allow exponential notation to be used with base 10 argument, while\r\n\t        // also rounding to DECIMAL_PLACES as with other bases.\r\n\t        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n\t          x = new BigNumber(v);\r\n\t          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n\t        }\r\n\r\n\t        str = String(v);\r\n\r\n\t        if (isNum = typeof v == 'number') {\r\n\r\n\t          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n\t          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n\t          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n\t          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n\t          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n\t            throw Error\r\n\t             (tooManyDigits + v);\r\n\t          }\r\n\t        } else {\r\n\t          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n\t        }\r\n\r\n\t        alphabet = ALPHABET.slice(0, b);\r\n\t        e = i = 0;\r\n\r\n\t        // Check that str is a valid base b number.\r\n\t        // Don't use RegExp, so alphabet can contain special characters.\r\n\t        for (len = str.length; i < len; i++) {\r\n\t          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n\t            if (c == '.') {\r\n\r\n\t              // If '.' is not the first character and it has not be found before.\r\n\t              if (i > e) {\r\n\t                e = len;\r\n\t                continue;\r\n\t              }\r\n\t            } else if (!caseChanged) {\r\n\r\n\t              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n\t              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n\t                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n\t                caseChanged = true;\r\n\t                i = -1;\r\n\t                e = 0;\r\n\t                continue;\r\n\t              }\r\n\t            }\r\n\r\n\t            return parseNumeric(x, String(v), isNum, b);\r\n\t          }\r\n\t        }\r\n\r\n\t        // Prevent later check for length on converted number.\r\n\t        isNum = false;\r\n\t        str = convertBase(str, b, 10, x.s);\r\n\r\n\t        // Decimal point?\r\n\t        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\t        else e = str.length;\r\n\t      }\r\n\r\n\t      // Determine leading zeros.\r\n\t      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n\t      // Determine trailing zeros.\r\n\t      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n\t      if (str = str.slice(i, ++len)) {\r\n\t        len -= i;\r\n\r\n\t        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n\t        if (isNum && BigNumber.DEBUG &&\r\n\t          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n\t            throw Error\r\n\t             (tooManyDigits + (x.s * v));\r\n\t        }\r\n\r\n\t         // Overflow?\r\n\t        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n\t          // Infinity.\r\n\t          x.c = x.e = null;\r\n\r\n\t        // Underflow?\r\n\t        } else if (e < MIN_EXP) {\r\n\r\n\t          // Zero.\r\n\t          x.c = [x.e = 0];\r\n\t        } else {\r\n\t          x.e = e;\r\n\t          x.c = [];\r\n\r\n\t          // Transform base\r\n\r\n\t          // e is the base 10 exponent.\r\n\t          // i is where to slice str to get the first element of the coefficient array.\r\n\t          i = (e + 1) % LOG_BASE;\r\n\t          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n\t          if (i < len) {\r\n\t            if (i) x.c.push(+str.slice(0, i));\r\n\r\n\t            for (len -= LOG_BASE; i < len;) {\r\n\t              x.c.push(+str.slice(i, i += LOG_BASE));\r\n\t            }\r\n\r\n\t            i = LOG_BASE - (str = str.slice(i)).length;\r\n\t          } else {\r\n\t            i -= len;\r\n\t          }\r\n\r\n\t          for (; i--; str += '0');\r\n\t          x.c.push(+str);\r\n\t        }\r\n\t      } else {\r\n\r\n\t        // Zero.\r\n\t        x.c = [x.e = 0];\r\n\t      }\r\n\t    }\r\n\r\n\r\n\t    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n\t    BigNumber.clone = clone;\r\n\r\n\t    BigNumber.ROUND_UP = 0;\r\n\t    BigNumber.ROUND_DOWN = 1;\r\n\t    BigNumber.ROUND_CEIL = 2;\r\n\t    BigNumber.ROUND_FLOOR = 3;\r\n\t    BigNumber.ROUND_HALF_UP = 4;\r\n\t    BigNumber.ROUND_HALF_DOWN = 5;\r\n\t    BigNumber.ROUND_HALF_EVEN = 6;\r\n\t    BigNumber.ROUND_HALF_CEIL = 7;\r\n\t    BigNumber.ROUND_HALF_FLOOR = 8;\r\n\t    BigNumber.EUCLID = 9;\r\n\r\n\r\n\t    /*\r\n\t     * Configure infrequently-changing library-wide settings.\r\n\t     *\r\n\t     * Accept an object with the following optional properties (if the value of a property is\r\n\t     * a number, it must be an integer within the inclusive range stated):\r\n\t     *\r\n\t     *   DECIMAL_PLACES   {number}           0 to MAX\r\n\t     *   ROUNDING_MODE    {number}           0 to 8\r\n\t     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n\t     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n\t     *   CRYPTO           {boolean}          true or false\r\n\t     *   MODULO_MODE      {number}           0 to 9\r\n\t     *   POW_PRECISION       {number}           0 to MAX\r\n\t     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n\t     *                                       not contain '.'.\r\n\t     *   FORMAT           {object}           An object with some of the following properties:\r\n\t     *     prefix                 {string}\r\n\t     *     groupSize              {number}\r\n\t     *     secondaryGroupSize     {number}\r\n\t     *     groupSeparator         {string}\r\n\t     *     decimalSeparator       {string}\r\n\t     *     fractionGroupSize      {number}\r\n\t     *     fractionGroupSeparator {string}\r\n\t     *     suffix                 {string}\r\n\t     *\r\n\t     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n\t     *\r\n\t     * E.g.\r\n\t     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n\t     *\r\n\t     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n\t     *\r\n\t     * Return an object with the properties current values.\r\n\t     */\r\n\t    BigNumber.config = BigNumber.set = function (obj) {\r\n\t      var p, v;\r\n\r\n\t      if (obj != null) {\r\n\r\n\t        if (typeof obj == 'object') {\r\n\r\n\t          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n\t          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, MAX, p);\r\n\t            DECIMAL_PLACES = v;\r\n\t          }\r\n\r\n\t          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n\t          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, 8, p);\r\n\t            ROUNDING_MODE = v;\r\n\t          }\r\n\r\n\t          // EXPONENTIAL_AT {number|number[]}\r\n\t          // Integer, -MAX to MAX inclusive or\r\n\t          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n\t          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n\t            v = obj[p];\r\n\t            if (v && v.pop) {\r\n\t              intCheck(v[0], -MAX, 0, p);\r\n\t              intCheck(v[1], 0, MAX, p);\r\n\t              TO_EXP_NEG = v[0];\r\n\t              TO_EXP_POS = v[1];\r\n\t            } else {\r\n\t              intCheck(v, -MAX, MAX, p);\r\n\t              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n\t            }\r\n\t          }\r\n\r\n\t          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n\t          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n\t          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n\t            v = obj[p];\r\n\t            if (v && v.pop) {\r\n\t              intCheck(v[0], -MAX, -1, p);\r\n\t              intCheck(v[1], 1, MAX, p);\r\n\t              MIN_EXP = v[0];\r\n\t              MAX_EXP = v[1];\r\n\t            } else {\r\n\t              intCheck(v, -MAX, MAX, p);\r\n\t              if (v) {\r\n\t                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n\t              } else {\r\n\t                throw Error\r\n\t                 (bignumberError + p + ' cannot be zero: ' + v);\r\n\t              }\r\n\t            }\r\n\t          }\r\n\r\n\t          // CRYPTO {boolean} true or false.\r\n\t          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n\t          // '[BigNumber Error] crypto unavailable'\r\n\t          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n\t            v = obj[p];\r\n\t            if (v === !!v) {\r\n\t              if (v) {\r\n\t                if (typeof crypto != 'undefined' && crypto &&\r\n\t                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n\t                  CRYPTO = v;\r\n\t                } else {\r\n\t                  CRYPTO = !v;\r\n\t                  throw Error\r\n\t                   (bignumberError + 'crypto unavailable');\r\n\t                }\r\n\t              } else {\r\n\t                CRYPTO = v;\r\n\t              }\r\n\t            } else {\r\n\t              throw Error\r\n\t               (bignumberError + p + ' not true or false: ' + v);\r\n\t            }\r\n\t          }\r\n\r\n\t          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n\t          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, 9, p);\r\n\t            MODULO_MODE = v;\r\n\t          }\r\n\r\n\t          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n\t          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n\t            v = obj[p];\r\n\t            intCheck(v, 0, MAX, p);\r\n\t            POW_PRECISION = v;\r\n\t          }\r\n\r\n\t          // FORMAT {object}\r\n\t          // '[BigNumber Error] FORMAT not an object: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n\t            v = obj[p];\r\n\t            if (typeof v == 'object') FORMAT = v;\r\n\t            else throw Error\r\n\t             (bignumberError + p + ' not an object: ' + v);\r\n\t          }\r\n\r\n\t          // ALPHABET {string}\r\n\t          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n\t          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n\t            v = obj[p];\r\n\r\n\t            // Disallow if less than two characters,\r\n\t            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n\t            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n\t              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n\t              ALPHABET = v;\r\n\t            } else {\r\n\t              throw Error\r\n\t               (bignumberError + p + ' invalid: ' + v);\r\n\t            }\r\n\t          }\r\n\r\n\t        } else {\r\n\r\n\t          // '[BigNumber Error] Object expected: {v}'\r\n\t          throw Error\r\n\t           (bignumberError + 'Object expected: ' + obj);\r\n\t        }\r\n\t      }\r\n\r\n\t      return {\r\n\t        DECIMAL_PLACES: DECIMAL_PLACES,\r\n\t        ROUNDING_MODE: ROUNDING_MODE,\r\n\t        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n\t        RANGE: [MIN_EXP, MAX_EXP],\r\n\t        CRYPTO: CRYPTO,\r\n\t        MODULO_MODE: MODULO_MODE,\r\n\t        POW_PRECISION: POW_PRECISION,\r\n\t        FORMAT: FORMAT,\r\n\t        ALPHABET: ALPHABET\r\n\t      };\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if v is a BigNumber instance, otherwise return false.\r\n\t     *\r\n\t     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n\t     *\r\n\t     * v {any}\r\n\t     *\r\n\t     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n\t     */\r\n\t    BigNumber.isBigNumber = function (v) {\r\n\t      if (!v || v._isBigNumber !== true) return false;\r\n\t      if (!BigNumber.DEBUG) return true;\r\n\r\n\t      var i, n,\r\n\t        c = v.c,\r\n\t        e = v.e,\r\n\t        s = v.s;\r\n\r\n\t      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n\t        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n\t          // If the first element is zero, the BigNumber value must be zero.\r\n\t          if (c[0] === 0) {\r\n\t            if (e === 0 && c.length === 1) return true;\r\n\t            break out;\r\n\t          }\r\n\r\n\t          // Calculate number of digits that c[0] should have, based on the exponent.\r\n\t          i = (e + 1) % LOG_BASE;\r\n\t          if (i < 1) i += LOG_BASE;\r\n\r\n\t          // Calculate number of digits of c[0].\r\n\t          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n\t          if (String(c[0]).length == i) {\r\n\r\n\t            for (i = 0; i < c.length; i++) {\r\n\t              n = c[i];\r\n\t              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n\t            }\r\n\r\n\t            // Last element cannot be zero, unless it is the only element.\r\n\t            if (n !== 0) return true;\r\n\t          }\r\n\t        }\r\n\r\n\t      // Infinity/NaN\r\n\t      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n\t        return true;\r\n\t      }\r\n\r\n\t      throw Error\r\n\t        (bignumberError + 'Invalid BigNumber: ' + v);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the maximum of the arguments.\r\n\t     *\r\n\t     * arguments {number|string|BigNumber}\r\n\t     */\r\n\t    BigNumber.maximum = BigNumber.max = function () {\r\n\t      return maxOrMin(arguments, -1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the minimum of the arguments.\r\n\t     *\r\n\t     * arguments {number|string|BigNumber}\r\n\t     */\r\n\t    BigNumber.minimum = BigNumber.min = function () {\r\n\t      return maxOrMin(arguments, 1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n\t     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n\t     * zeros are produced).\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n\t     * '[BigNumber Error] crypto unavailable'\r\n\t     */\r\n\t    BigNumber.random = (function () {\r\n\t      var pow2_53 = 0x20000000000000;\r\n\r\n\t      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n\t      // Check if Math.random() produces more than 32 bits of randomness.\r\n\t      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n\t      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n\t      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n\t       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n\t       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n\t         (Math.random() * 0x800000 | 0); };\r\n\r\n\t      return function (dp) {\r\n\t        var a, b, e, k, v,\r\n\t          i = 0,\r\n\t          c = [],\r\n\t          rand = new BigNumber(ONE);\r\n\r\n\t        if (dp == null) dp = DECIMAL_PLACES;\r\n\t        else intCheck(dp, 0, MAX);\r\n\r\n\t        k = mathceil(dp / LOG_BASE);\r\n\r\n\t        if (CRYPTO) {\r\n\r\n\t          // Browsers supporting crypto.getRandomValues.\r\n\t          if (crypto.getRandomValues) {\r\n\r\n\t            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n\t            for (; i < k;) {\r\n\r\n\t              // 53 bits:\r\n\t              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n\t              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n\t              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n\t              //                                     11111 11111111 11111111\r\n\t              // 0x20000 is 2^21.\r\n\t              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n\t              // Rejection sampling:\r\n\t              // 0 <= v < 9007199254740992\r\n\t              // Probability that v >= 9e15, is\r\n\t              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n\t              if (v >= 9e15) {\r\n\t                b = crypto.getRandomValues(new Uint32Array(2));\r\n\t                a[i] = b[0];\r\n\t                a[i + 1] = b[1];\r\n\t              } else {\r\n\r\n\t                // 0 <= v <= 8999999999999999\r\n\t                // 0 <= (v % 1e14) <= 99999999999999\r\n\t                c.push(v % 1e14);\r\n\t                i += 2;\r\n\t              }\r\n\t            }\r\n\t            i = k / 2;\r\n\r\n\t          // Node.js supporting crypto.randomBytes.\r\n\t          } else if (crypto.randomBytes) {\r\n\r\n\t            // buffer\r\n\t            a = crypto.randomBytes(k *= 7);\r\n\r\n\t            for (; i < k;) {\r\n\r\n\t              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n\t              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n\t              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n\t              // 0 <= v < 9007199254740992\r\n\t              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n\t                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n\t                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n\t              if (v >= 9e15) {\r\n\t                crypto.randomBytes(7).copy(a, i);\r\n\t              } else {\r\n\r\n\t                // 0 <= (v % 1e14) <= 99999999999999\r\n\t                c.push(v % 1e14);\r\n\t                i += 7;\r\n\t              }\r\n\t            }\r\n\t            i = k / 7;\r\n\t          } else {\r\n\t            CRYPTO = false;\r\n\t            throw Error\r\n\t             (bignumberError + 'crypto unavailable');\r\n\t          }\r\n\t        }\r\n\r\n\t        // Use Math.random.\r\n\t        if (!CRYPTO) {\r\n\r\n\t          for (; i < k;) {\r\n\t            v = random53bitInt();\r\n\t            if (v < 9e15) c[i++] = v % 1e14;\r\n\t          }\r\n\t        }\r\n\r\n\t        k = c[--i];\r\n\t        dp %= LOG_BASE;\r\n\r\n\t        // Convert trailing digits to zeros according to dp.\r\n\t        if (k && dp) {\r\n\t          v = POWS_TEN[LOG_BASE - dp];\r\n\t          c[i] = mathfloor(k / v) * v;\r\n\t        }\r\n\r\n\t        // Remove trailing elements which are zero.\r\n\t        for (; c[i] === 0; c.pop(), i--);\r\n\r\n\t        // Zero?\r\n\t        if (i < 0) {\r\n\t          c = [e = 0];\r\n\t        } else {\r\n\r\n\t          // Remove leading elements which are zero and adjust exponent accordingly.\r\n\t          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n\t          // Count the digits of the first element of c to determine leading zeros, and...\r\n\t          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n\t          // adjust the exponent accordingly.\r\n\t          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n\t        }\r\n\r\n\t        rand.e = e;\r\n\t        rand.c = c;\r\n\t        return rand;\r\n\t      };\r\n\t    })();\r\n\r\n\r\n\t    /*\r\n\t     * Return a BigNumber whose value is the sum of the arguments.\r\n\t     *\r\n\t     * arguments {number|string|BigNumber}\r\n\t     */\r\n\t    BigNumber.sum = function () {\r\n\t      var i = 1,\r\n\t        args = arguments,\r\n\t        sum = new BigNumber(args[0]);\r\n\t      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n\t      return sum;\r\n\t    };\r\n\r\n\r\n\t    // PRIVATE FUNCTIONS\r\n\r\n\r\n\t    // Called by BigNumber and BigNumber.prototype.toString.\r\n\t    convertBase = (function () {\r\n\t      var decimal = '0123456789';\r\n\r\n\t      /*\r\n\t       * Convert string of baseIn to an array of numbers of baseOut.\r\n\t       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n\t       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n\t       */\r\n\t      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n\t        var j,\r\n\t          arr = [0],\r\n\t          arrL,\r\n\t          i = 0,\r\n\t          len = str.length;\r\n\r\n\t        for (; i < len;) {\r\n\t          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n\t          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n\t          for (j = 0; j < arr.length; j++) {\r\n\r\n\t            if (arr[j] > baseOut - 1) {\r\n\t              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n\t              arr[j + 1] += arr[j] / baseOut | 0;\r\n\t              arr[j] %= baseOut;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\r\n\t        return arr.reverse();\r\n\t      }\r\n\r\n\t      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n\t      // If the caller is toString, we are converting from base 10 to baseOut.\r\n\t      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n\t      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n\t        var alphabet, d, e, k, r, x, xc, y,\r\n\t          i = str.indexOf('.'),\r\n\t          dp = DECIMAL_PLACES,\r\n\t          rm = ROUNDING_MODE;\r\n\r\n\t        // Non-integer.\r\n\t        if (i >= 0) {\r\n\t          k = POW_PRECISION;\r\n\r\n\t          // Unlimited precision.\r\n\t          POW_PRECISION = 0;\r\n\t          str = str.replace('.', '');\r\n\t          y = new BigNumber(baseIn);\r\n\t          x = y.pow(str.length - i);\r\n\t          POW_PRECISION = k;\r\n\r\n\t          // Convert str as if an integer, then restore the fraction part by dividing the\r\n\t          // result by its base raised to a power.\r\n\r\n\t          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n\t           10, baseOut, decimal);\r\n\t          y.e = y.c.length;\r\n\t        }\r\n\r\n\t        // Convert the number as integer.\r\n\r\n\t        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n\t         ? (alphabet = ALPHABET, decimal)\r\n\t         : (alphabet = decimal, ALPHABET));\r\n\r\n\t        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n\t        e = k = xc.length;\r\n\r\n\t        // Remove trailing zeros.\r\n\t        for (; xc[--k] == 0; xc.pop());\r\n\r\n\t        // Zero?\r\n\t        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n\t        // Does str represent an integer? If so, no need for the division.\r\n\t        if (i < 0) {\r\n\t          --e;\r\n\t        } else {\r\n\t          x.c = xc;\r\n\t          x.e = e;\r\n\r\n\t          // The sign is needed for correct rounding.\r\n\t          x.s = sign;\r\n\t          x = div(x, y, dp, rm, baseOut);\r\n\t          xc = x.c;\r\n\t          r = x.r;\r\n\t          e = x.e;\r\n\t        }\r\n\r\n\t        // xc now represents str converted to baseOut.\r\n\r\n\t        // THe index of the rounding digit.\r\n\t        d = e + dp + 1;\r\n\r\n\t        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n\t        i = xc[d];\r\n\r\n\t        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n\t        k = baseOut / 2;\r\n\t        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n\t        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n\t              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n\t               rm == (x.s < 0 ? 8 : 7));\r\n\r\n\t        // If the index of the rounding digit is not greater than zero, or xc represents\r\n\t        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n\t        // such as 0.00001.\r\n\t        if (d < 1 || !xc[0]) {\r\n\r\n\t          // 1^-dp or 0\r\n\t          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n\t        } else {\r\n\r\n\t          // Truncate xc to the required number of decimal places.\r\n\t          xc.length = d;\r\n\r\n\t          // Round up?\r\n\t          if (r) {\r\n\r\n\t            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n\t            for (--baseOut; ++xc[--d] > baseOut;) {\r\n\t              xc[d] = 0;\r\n\r\n\t              if (!d) {\r\n\t                ++e;\r\n\t                xc = [1].concat(xc);\r\n\t              }\r\n\t            }\r\n\t          }\r\n\r\n\t          // Determine trailing zeros.\r\n\t          for (k = xc.length; !xc[--k];);\r\n\r\n\t          // E.g. [4, 11, 15] becomes 4bf.\r\n\t          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n\t          // Add leading zeros, decimal point and trailing zeros as required.\r\n\t          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n\t        }\r\n\r\n\t        // The caller will add the sign.\r\n\t        return str;\r\n\t      };\r\n\t    })();\r\n\r\n\r\n\t    // Perform division in the specified base. Called by div and convertBase.\r\n\t    div = (function () {\r\n\r\n\t      // Assume non-zero x and k.\r\n\t      function multiply(x, k, base) {\r\n\t        var m, temp, xlo, xhi,\r\n\t          carry = 0,\r\n\t          i = x.length,\r\n\t          klo = k % SQRT_BASE,\r\n\t          khi = k / SQRT_BASE | 0;\r\n\r\n\t        for (x = x.slice(); i--;) {\r\n\t          xlo = x[i] % SQRT_BASE;\r\n\t          xhi = x[i] / SQRT_BASE | 0;\r\n\t          m = khi * xlo + xhi * klo;\r\n\t          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n\t          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n\t          x[i] = temp % base;\r\n\t        }\r\n\r\n\t        if (carry) x = [carry].concat(x);\r\n\r\n\t        return x;\r\n\t      }\r\n\r\n\t      function compare(a, b, aL, bL) {\r\n\t        var i, cmp;\r\n\r\n\t        if (aL != bL) {\r\n\t          cmp = aL > bL ? 1 : -1;\r\n\t        } else {\r\n\r\n\t          for (i = cmp = 0; i < aL; i++) {\r\n\r\n\t            if (a[i] != b[i]) {\r\n\t              cmp = a[i] > b[i] ? 1 : -1;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\r\n\t        return cmp;\r\n\t      }\r\n\r\n\t      function subtract(a, b, aL, base) {\r\n\t        var i = 0;\r\n\r\n\t        // Subtract b from a.\r\n\t        for (; aL--;) {\r\n\t          a[aL] -= i;\r\n\t          i = a[aL] < b[aL] ? 1 : 0;\r\n\t          a[aL] = i * base + a[aL] - b[aL];\r\n\t        }\r\n\r\n\t        // Remove leading zeros.\r\n\t        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n\t      }\r\n\r\n\t      // x: dividend, y: divisor.\r\n\t      return function (x, y, dp, rm, base) {\r\n\t        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n\t          yL, yz,\r\n\t          s = x.s == y.s ? 1 : -1,\r\n\t          xc = x.c,\r\n\t          yc = y.c;\r\n\r\n\t        // Either NaN, Infinity or 0?\r\n\t        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n\t          return new BigNumber(\r\n\r\n\t           // Return NaN if either NaN, or both Infinity or 0.\r\n\t           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n\t            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n\t            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n\t         );\r\n\t        }\r\n\r\n\t        q = new BigNumber(s);\r\n\t        qc = q.c = [];\r\n\t        e = x.e - y.e;\r\n\t        s = dp + e + 1;\r\n\r\n\t        if (!base) {\r\n\t          base = BASE;\r\n\t          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n\t          s = s / LOG_BASE | 0;\r\n\t        }\r\n\r\n\t        // Result exponent may be one less then the current value of e.\r\n\t        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n\t        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n\t        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n\t        if (s < 0) {\r\n\t          qc.push(1);\r\n\t          more = true;\r\n\t        } else {\r\n\t          xL = xc.length;\r\n\t          yL = yc.length;\r\n\t          i = 0;\r\n\t          s += 2;\r\n\r\n\t          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n\t          n = mathfloor(base / (yc[0] + 1));\r\n\r\n\t          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n\t          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n\t          if (n > 1) {\r\n\t            yc = multiply(yc, n, base);\r\n\t            xc = multiply(xc, n, base);\r\n\t            yL = yc.length;\r\n\t            xL = xc.length;\r\n\t          }\r\n\r\n\t          xi = yL;\r\n\t          rem = xc.slice(0, yL);\r\n\t          remL = rem.length;\r\n\r\n\t          // Add zeros to make remainder as long as divisor.\r\n\t          for (; remL < yL; rem[remL++] = 0);\r\n\t          yz = yc.slice();\r\n\t          yz = [0].concat(yz);\r\n\t          yc0 = yc[0];\r\n\t          if (yc[1] >= base / 2) yc0++;\r\n\t          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n\t          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n\t          do {\r\n\t            n = 0;\r\n\r\n\t            // Compare divisor and remainder.\r\n\t            cmp = compare(yc, rem, yL, remL);\r\n\r\n\t            // If divisor < remainder.\r\n\t            if (cmp < 0) {\r\n\r\n\t              // Calculate trial digit, n.\r\n\r\n\t              rem0 = rem[0];\r\n\t              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n\t              // n is how many times the divisor goes into the current remainder.\r\n\t              n = mathfloor(rem0 / yc0);\r\n\r\n\t              //  Algorithm:\r\n\t              //  product = divisor multiplied by trial digit (n).\r\n\t              //  Compare product and remainder.\r\n\t              //  If product is greater than remainder:\r\n\t              //    Subtract divisor from product, decrement trial digit.\r\n\t              //  Subtract product from remainder.\r\n\t              //  If product was less than remainder at the last compare:\r\n\t              //    Compare new remainder and divisor.\r\n\t              //    If remainder is greater than divisor:\r\n\t              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n\t              if (n > 1) {\r\n\r\n\t                // n may be > base only when base is 3.\r\n\t                if (n >= base) n = base - 1;\r\n\r\n\t                // product = divisor * trial digit.\r\n\t                prod = multiply(yc, n, base);\r\n\t                prodL = prod.length;\r\n\t                remL = rem.length;\r\n\r\n\t                // Compare product and remainder.\r\n\t                // If product > remainder then trial digit n too high.\r\n\t                // n is 1 too high about 5% of the time, and is not known to have\r\n\t                // ever been more than 1 too high.\r\n\t                while (compare(prod, rem, prodL, remL) == 1) {\r\n\t                  n--;\r\n\r\n\t                  // Subtract divisor from product.\r\n\t                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n\t                  prodL = prod.length;\r\n\t                  cmp = 1;\r\n\t                }\r\n\t              } else {\r\n\r\n\t                // n is 0 or 1, cmp is -1.\r\n\t                // If n is 0, there is no need to compare yc and rem again below,\r\n\t                // so change cmp to 1 to avoid it.\r\n\t                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n\t                if (n == 0) {\r\n\r\n\t                  // divisor < remainder, so n must be at least 1.\r\n\t                  cmp = n = 1;\r\n\t                }\r\n\r\n\t                // product = divisor\r\n\t                prod = yc.slice();\r\n\t                prodL = prod.length;\r\n\t              }\r\n\r\n\t              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n\t              // Subtract product from remainder.\r\n\t              subtract(rem, prod, remL, base);\r\n\t              remL = rem.length;\r\n\r\n\t               // If product was < remainder.\r\n\t              if (cmp == -1) {\r\n\r\n\t                // Compare divisor and new remainder.\r\n\t                // If divisor < new remainder, subtract divisor from remainder.\r\n\t                // Trial digit n too low.\r\n\t                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n\t                while (compare(yc, rem, yL, remL) < 1) {\r\n\t                  n++;\r\n\r\n\t                  // Subtract divisor from remainder.\r\n\t                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n\t                  remL = rem.length;\r\n\t                }\r\n\t              }\r\n\t            } else if (cmp === 0) {\r\n\t              n++;\r\n\t              rem = [0];\r\n\t            } // else cmp === 1 and n will be 0\r\n\r\n\t            // Add the next digit, n, to the result array.\r\n\t            qc[i++] = n;\r\n\r\n\t            // Update the remainder.\r\n\t            if (rem[0]) {\r\n\t              rem[remL++] = xc[xi] || 0;\r\n\t            } else {\r\n\t              rem = [xc[xi]];\r\n\t              remL = 1;\r\n\t            }\r\n\t          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n\t          more = rem[0] != null;\r\n\r\n\t          // Leading zero?\r\n\t          if (!qc[0]) qc.splice(0, 1);\r\n\t        }\r\n\r\n\t        if (base == BASE) {\r\n\r\n\t          // To calculate q.e, first get the number of digits of qc[0].\r\n\t          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n\t          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n\t        // Caller is convertBase.\r\n\t        } else {\r\n\t          q.e = e;\r\n\t          q.r = +more;\r\n\t        }\r\n\r\n\t        return q;\r\n\t      };\r\n\t    })();\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n\t     * notation rounded to the specified decimal places or significant digits.\r\n\t     *\r\n\t     * n: a BigNumber.\r\n\t     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n\t     * rm: the rounding mode.\r\n\t     * id: 1 (toExponential) or 2 (toPrecision).\r\n\t     */\r\n\t    function format(n, i, rm, id) {\r\n\t      var c0, e, ne, len, str;\r\n\r\n\t      if (rm == null) rm = ROUNDING_MODE;\r\n\t      else intCheck(rm, 0, 8);\r\n\r\n\t      if (!n.c) return n.toString();\r\n\r\n\t      c0 = n.c[0];\r\n\t      ne = n.e;\r\n\r\n\t      if (i == null) {\r\n\t        str = coeffToString(n.c);\r\n\t        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n\t         ? toExponential(str, ne)\r\n\t         : toFixedPoint(str, ne, '0');\r\n\t      } else {\r\n\t        n = round(new BigNumber(n), i, rm);\r\n\r\n\t        // n.e may have changed if the value was rounded up.\r\n\t        e = n.e;\r\n\r\n\t        str = coeffToString(n.c);\r\n\t        len = str.length;\r\n\r\n\t        // toPrecision returns exponential notation if the number of significant digits\r\n\t        // specified is less than the number of digits necessary to represent the integer\r\n\t        // part of the value in fixed-point notation.\r\n\r\n\t        // Exponential notation.\r\n\t        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n\t          // Append zeros?\r\n\t          for (; len < i; str += '0', len++);\r\n\t          str = toExponential(str, e);\r\n\r\n\t        // Fixed-point notation.\r\n\t        } else {\r\n\t          i -= ne;\r\n\t          str = toFixedPoint(str, e, '0');\r\n\r\n\t          // Append zeros?\r\n\t          if (e + 1 > len) {\r\n\t            if (--i > 0) for (str += '.'; i--; str += '0');\r\n\t          } else {\r\n\t            i += e - len;\r\n\t            if (i > 0) {\r\n\t              if (e + 1 == len) str += '.';\r\n\t              for (; i--; str += '0');\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      return n.s < 0 && c0 ? '-' + str : str;\r\n\t    }\r\n\r\n\r\n\t    // Handle BigNumber.max and BigNumber.min.\r\n\t    // If any number is NaN, return NaN.\r\n\t    function maxOrMin(args, n) {\r\n\t      var k, y,\r\n\t        i = 1,\r\n\t        x = new BigNumber(args[0]);\r\n\r\n\t      for (; i < args.length; i++) {\r\n\t        y = new BigNumber(args[i]);\r\n\t        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n\t          x = y;\r\n\t        }\r\n\t      }\r\n\r\n\t      return x;\r\n\t    }\r\n\r\n\r\n\t    /*\r\n\t     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n\t     * Called by minus, plus and times.\r\n\t     */\r\n\t    function normalise(n, c, e) {\r\n\t      var i = 1,\r\n\t        j = c.length;\r\n\r\n\t       // Remove trailing zeros.\r\n\t      for (; !c[--j]; c.pop());\r\n\r\n\t      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n\t      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n\t      // Overflow?\r\n\t      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n\t        // Infinity.\r\n\t        n.c = n.e = null;\r\n\r\n\t      // Underflow?\r\n\t      } else if (e < MIN_EXP) {\r\n\r\n\t        // Zero.\r\n\t        n.c = [n.e = 0];\r\n\t      } else {\r\n\t        n.e = e;\r\n\t        n.c = c;\r\n\t      }\r\n\r\n\t      return n;\r\n\t    }\r\n\r\n\r\n\t    // Handle values that fail the validity test in BigNumber.\r\n\t    parseNumeric = (function () {\r\n\t      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n\t        dotAfter = /^([^.]+)\\.$/,\r\n\t        dotBefore = /^\\.([^.]+)$/,\r\n\t        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n\t        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n\t      return function (x, str, isNum, b) {\r\n\t        var base,\r\n\t          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n\t        // No exception on ±Infinity or NaN.\r\n\t        if (isInfinityOrNaN.test(s)) {\r\n\t          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n\t        } else {\r\n\t          if (!isNum) {\r\n\r\n\t            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n\t            s = s.replace(basePrefix, function (m, p1, p2) {\r\n\t              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n\t              return !b || b == base ? p1 : m;\r\n\t            });\r\n\r\n\t            if (b) {\r\n\t              base = b;\r\n\r\n\t              // E.g. '1.' to '1', '.1' to '0.1'\r\n\t              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n\t            }\r\n\r\n\t            if (str != s) return new BigNumber(s, base);\r\n\t          }\r\n\r\n\t          // '[BigNumber Error] Not a number: {n}'\r\n\t          // '[BigNumber Error] Not a base {b} number: {n}'\r\n\t          if (BigNumber.DEBUG) {\r\n\t            throw Error\r\n\t              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n\t          }\r\n\r\n\t          // NaN\r\n\t          x.s = null;\r\n\t        }\r\n\r\n\t        x.c = x.e = null;\r\n\t      }\r\n\t    })();\r\n\r\n\r\n\t    /*\r\n\t     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n\t     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n\t     */\r\n\t    function round(x, sd, rm, r) {\r\n\t      var d, i, j, k, n, ni, rd,\r\n\t        xc = x.c,\r\n\t        pows10 = POWS_TEN;\r\n\r\n\t      // if x is not Infinity or NaN...\r\n\t      if (xc) {\r\n\r\n\t        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n\t        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n\t        // ni is the index of n within x.c.\r\n\t        // d is the number of digits of n.\r\n\t        // i is the index of rd within n including leading zeros.\r\n\t        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n\t        out: {\r\n\r\n\t          // Get the number of digits of the first element of xc.\r\n\t          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n\t          i = sd - d;\r\n\r\n\t          // If the rounding digit is in the first element of xc...\r\n\t          if (i < 0) {\r\n\t            i += LOG_BASE;\r\n\t            j = sd;\r\n\t            n = xc[ni = 0];\r\n\r\n\t            // Get the rounding digit at index j of n.\r\n\t            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n\t          } else {\r\n\t            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n\t            if (ni >= xc.length) {\r\n\r\n\t              if (r) {\r\n\r\n\t                // Needed by sqrt.\r\n\t                for (; xc.length <= ni; xc.push(0));\r\n\t                n = rd = 0;\r\n\t                d = 1;\r\n\t                i %= LOG_BASE;\r\n\t                j = i - LOG_BASE + 1;\r\n\t              } else {\r\n\t                break out;\r\n\t              }\r\n\t            } else {\r\n\t              n = k = xc[ni];\r\n\r\n\t              // Get the number of digits of n.\r\n\t              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n\t              // Get the index of rd within n.\r\n\t              i %= LOG_BASE;\r\n\r\n\t              // Get the index of rd within n, adjusted for leading zeros.\r\n\t              // The number of leading zeros of n is given by LOG_BASE - d.\r\n\t              j = i - LOG_BASE + d;\r\n\r\n\t              // Get the rounding digit at index j of n.\r\n\t              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n\t            }\r\n\t          }\r\n\r\n\t          r = r || sd < 0 ||\r\n\r\n\t          // Are there any non-zero digits after the rounding digit?\r\n\t          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n\t          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n\t           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n\t          r = rm < 4\r\n\t           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n\t           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n\t            // Check whether the digit to the left of the rounding digit is odd.\r\n\t            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n\t             rm == (x.s < 0 ? 8 : 7));\r\n\r\n\t          if (sd < 1 || !xc[0]) {\r\n\t            xc.length = 0;\r\n\r\n\t            if (r) {\r\n\r\n\t              // Convert sd to decimal places.\r\n\t              sd -= x.e + 1;\r\n\r\n\t              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n\t              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n\t              x.e = -sd || 0;\r\n\t            } else {\r\n\r\n\t              // Zero.\r\n\t              xc[0] = x.e = 0;\r\n\t            }\r\n\r\n\t            return x;\r\n\t          }\r\n\r\n\t          // Remove excess digits.\r\n\t          if (i == 0) {\r\n\t            xc.length = ni;\r\n\t            k = 1;\r\n\t            ni--;\r\n\t          } else {\r\n\t            xc.length = ni + 1;\r\n\t            k = pows10[LOG_BASE - i];\r\n\r\n\t            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n\t            // j > 0 means i > number of leading zeros of n.\r\n\t            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n\t          }\r\n\r\n\t          // Round up?\r\n\t          if (r) {\r\n\r\n\t            for (; ;) {\r\n\r\n\t              // If the digit to be rounded up is in the first element of xc...\r\n\t              if (ni == 0) {\r\n\r\n\t                // i will be the length of xc[0] before k is added.\r\n\t                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n\t                j = xc[0] += k;\r\n\t                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n\t                // if i != k the length has increased.\r\n\t                if (i != k) {\r\n\t                  x.e++;\r\n\t                  if (xc[0] == BASE) xc[0] = 1;\r\n\t                }\r\n\r\n\t                break;\r\n\t              } else {\r\n\t                xc[ni] += k;\r\n\t                if (xc[ni] != BASE) break;\r\n\t                xc[ni--] = 0;\r\n\t                k = 1;\r\n\t              }\r\n\t            }\r\n\t          }\r\n\r\n\t          // Remove trailing zeros.\r\n\t          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n\t        }\r\n\r\n\t        // Overflow? Infinity.\r\n\t        if (x.e > MAX_EXP) {\r\n\t          x.c = x.e = null;\r\n\r\n\t        // Underflow? Zero.\r\n\t        } else if (x.e < MIN_EXP) {\r\n\t          x.c = [x.e = 0];\r\n\t        }\r\n\t      }\r\n\r\n\t      return x;\r\n\t    }\r\n\r\n\r\n\t    function valueOf(n) {\r\n\t      var str,\r\n\t        e = n.e;\r\n\r\n\t      if (e === null) return n.toString();\r\n\r\n\t      str = coeffToString(n.c);\r\n\r\n\t      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n\t        ? toExponential(str, e)\r\n\t        : toFixedPoint(str, e, '0');\r\n\r\n\t      return n.s < 0 ? '-' + str : str;\r\n\t    }\r\n\r\n\r\n\t    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n\t     */\r\n\t    P.absoluteValue = P.abs = function () {\r\n\t      var x = new BigNumber(this);\r\n\t      if (x.s < 0) x.s = 1;\r\n\t      return x;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return\r\n\t     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n\t     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n\t     *   0 if they have the same value,\r\n\t     *   or null if the value of either is NaN.\r\n\t     */\r\n\t    P.comparedTo = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b));\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n\t     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n\t     *\r\n\t     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n\t     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n\t     * ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     */\r\n\t    P.decimalPlaces = P.dp = function (dp, rm) {\r\n\t      var c, n, v,\r\n\t        x = this;\r\n\r\n\t      if (dp != null) {\r\n\t        intCheck(dp, 0, MAX);\r\n\t        if (rm == null) rm = ROUNDING_MODE;\r\n\t        else intCheck(rm, 0, 8);\r\n\r\n\t        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n\t      }\r\n\r\n\t      if (!(c = x.c)) return null;\r\n\t      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n\t      // Subtract the number of trailing zeros of the last number.\r\n\t      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n\t      if (n < 0) n = 0;\r\n\r\n\t      return n;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n / 0 = I\r\n\t     *  n / N = N\r\n\t     *  n / I = 0\r\n\t     *  0 / n = 0\r\n\t     *  0 / 0 = N\r\n\t     *  0 / N = N\r\n\t     *  0 / I = 0\r\n\t     *  N / n = N\r\n\t     *  N / 0 = N\r\n\t     *  N / N = N\r\n\t     *  N / I = N\r\n\t     *  I / n = I\r\n\t     *  I / 0 = I\r\n\t     *  I / N = N\r\n\t     *  I / I = N\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n\t     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t     */\r\n\t    P.dividedBy = P.div = function (y, b) {\r\n\t      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n\t     * BigNumber by the value of BigNumber(y, b).\r\n\t     */\r\n\t    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n\t      return div(this, new BigNumber(y, b), 0, 1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n\t     *\r\n\t     * If m is present, return the result modulo m.\r\n\t     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n\t     *\r\n\t     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n\t     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n\t     *\r\n\t     * n {number|string|BigNumber} The exponent. An integer.\r\n\t     * [m] {number|string|BigNumber} The modulus.\r\n\t     *\r\n\t     * '[BigNumber Error] Exponent not an integer: {n}'\r\n\t     */\r\n\t    P.exponentiatedBy = P.pow = function (n, m) {\r\n\t      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n\t        x = this;\r\n\r\n\t      n = new BigNumber(n);\r\n\r\n\t      // Allow NaN and ±Infinity, but not other non-integers.\r\n\t      if (n.c && !n.isInteger()) {\r\n\t        throw Error\r\n\t          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n\t      }\r\n\r\n\t      if (m != null) m = new BigNumber(m);\r\n\r\n\t      // Exponent of MAX_SAFE_INTEGER is 15.\r\n\t      nIsBig = n.e > 14;\r\n\r\n\t      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n\t      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n\t        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n\t        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n\t        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n\t        return m ? y.mod(m) : y;\r\n\t      }\r\n\r\n\t      nIsNeg = n.s < 0;\r\n\r\n\t      if (m) {\r\n\r\n\t        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n\t        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n\t        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n\t        if (isModExp) x = x.mod(m);\r\n\r\n\t      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n\t      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n\t      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n\t        // [1, 240000000]\r\n\t        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n\t        // [80000000000000]  [99999750000000]\r\n\t        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n\t        // If x is negative and n is odd, k = -0, else k = 0.\r\n\t        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n\t        // If x >= 1, k = ±Infinity.\r\n\t        if (x.e > -1) k = 1 / k;\r\n\r\n\t        // If n is negative return ±0, else return ±Infinity.\r\n\t        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n\t      } else if (POW_PRECISION) {\r\n\r\n\t        // Truncating each coefficient array to a length of k after each multiplication\r\n\t        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n\t        // i.e. there will be a minimum of 28 guard digits retained.\r\n\t        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n\t      }\r\n\r\n\t      if (nIsBig) {\r\n\t        half = new BigNumber(0.5);\r\n\t        if (nIsNeg) n.s = 1;\r\n\t        nIsOdd = isOdd(n);\r\n\t      } else {\r\n\t        i = Math.abs(+valueOf(n));\r\n\t        nIsOdd = i % 2;\r\n\t      }\r\n\r\n\t      y = new BigNumber(ONE);\r\n\r\n\t      // Performs 54 loop iterations for n of 9007199254740991.\r\n\t      for (; ;) {\r\n\r\n\t        if (nIsOdd) {\r\n\t          y = y.times(x);\r\n\t          if (!y.c) break;\r\n\r\n\t          if (k) {\r\n\t            if (y.c.length > k) y.c.length = k;\r\n\t          } else if (isModExp) {\r\n\t            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n\t          }\r\n\t        }\r\n\r\n\t        if (i) {\r\n\t          i = mathfloor(i / 2);\r\n\t          if (i === 0) break;\r\n\t          nIsOdd = i % 2;\r\n\t        } else {\r\n\t          n = n.times(half);\r\n\t          round(n, n.e + 1, 1);\r\n\r\n\t          if (n.e > 14) {\r\n\t            nIsOdd = isOdd(n);\r\n\t          } else {\r\n\t            i = +valueOf(n);\r\n\t            if (i === 0) break;\r\n\t            nIsOdd = i % 2;\r\n\t          }\r\n\t        }\r\n\r\n\t        x = x.times(x);\r\n\r\n\t        if (k) {\r\n\t          if (x.c && x.c.length > k) x.c.length = k;\r\n\t        } else if (isModExp) {\r\n\t          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n\t        }\r\n\t      }\r\n\r\n\t      if (isModExp) return y;\r\n\t      if (nIsNeg) y = ONE.div(y);\r\n\r\n\t      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n\t     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n\t     */\r\n\t    P.integerValue = function (rm) {\r\n\t      var n = new BigNumber(this);\r\n\t      if (rm == null) rm = ROUNDING_MODE;\r\n\t      else intCheck(rm, 0, 8);\r\n\t      return round(n, n.e + 1, rm);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n\t     * otherwise return false.\r\n\t     */\r\n\t    P.isEqualTo = P.eq = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b)) === 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n\t     */\r\n\t    P.isFinite = function () {\r\n\t      return !!this.c;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n\t     * otherwise return false.\r\n\t     */\r\n\t    P.isGreaterThan = P.gt = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b)) > 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n\t     * BigNumber(y, b), otherwise return false.\r\n\t     */\r\n\t    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n\t      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n\t     */\r\n\t    P.isInteger = function () {\r\n\t      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n\t     * otherwise return false.\r\n\t     */\r\n\t    P.isLessThan = P.lt = function (y, b) {\r\n\t      return compare(this, new BigNumber(y, b)) < 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is less than or equal to the value of\r\n\t     * BigNumber(y, b), otherwise return false.\r\n\t     */\r\n\t    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n\t      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n\t     */\r\n\t    P.isNaN = function () {\r\n\t      return !this.s;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n\t     */\r\n\t    P.isNegative = function () {\r\n\t      return this.s < 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n\t     */\r\n\t    P.isPositive = function () {\r\n\t      return this.s > 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n\t     */\r\n\t    P.isZero = function () {\r\n\t      return !!this.c && this.c[0] == 0;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n - 0 = n\r\n\t     *  n - N = N\r\n\t     *  n - I = -I\r\n\t     *  0 - n = -n\r\n\t     *  0 - 0 = 0\r\n\t     *  0 - N = N\r\n\t     *  0 - I = -I\r\n\t     *  N - n = N\r\n\t     *  N - 0 = N\r\n\t     *  N - N = N\r\n\t     *  N - I = N\r\n\t     *  I - n = I\r\n\t     *  I - 0 = I\r\n\t     *  I - N = N\r\n\t     *  I - I = N\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n\t     * BigNumber(y, b).\r\n\t     */\r\n\t    P.minus = function (y, b) {\r\n\t      var i, j, t, xLTy,\r\n\t        x = this,\r\n\t        a = x.s;\r\n\r\n\t      y = new BigNumber(y, b);\r\n\t      b = y.s;\r\n\r\n\t      // Either NaN?\r\n\t      if (!a || !b) return new BigNumber(NaN);\r\n\r\n\t      // Signs differ?\r\n\t      if (a != b) {\r\n\t        y.s = -b;\r\n\t        return x.plus(y);\r\n\t      }\r\n\r\n\t      var xe = x.e / LOG_BASE,\r\n\t        ye = y.e / LOG_BASE,\r\n\t        xc = x.c,\r\n\t        yc = y.c;\r\n\r\n\t      if (!xe || !ye) {\r\n\r\n\t        // Either Infinity?\r\n\t        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n\t        // Either zero?\r\n\t        if (!xc[0] || !yc[0]) {\r\n\r\n\t          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n\t          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n\t           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n\t           ROUNDING_MODE == 3 ? -0 : 0);\r\n\t        }\r\n\t      }\r\n\r\n\t      xe = bitFloor(xe);\r\n\t      ye = bitFloor(ye);\r\n\t      xc = xc.slice();\r\n\r\n\t      // Determine which is the bigger number.\r\n\t      if (a = xe - ye) {\r\n\r\n\t        if (xLTy = a < 0) {\r\n\t          a = -a;\r\n\t          t = xc;\r\n\t        } else {\r\n\t          ye = xe;\r\n\t          t = yc;\r\n\t        }\r\n\r\n\t        t.reverse();\r\n\r\n\t        // Prepend zeros to equalise exponents.\r\n\t        for (b = a; b--; t.push(0));\r\n\t        t.reverse();\r\n\t      } else {\r\n\r\n\t        // Exponents equal. Check digit by digit.\r\n\t        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n\t        for (a = b = 0; b < j; b++) {\r\n\r\n\t          if (xc[b] != yc[b]) {\r\n\t            xLTy = xc[b] < yc[b];\r\n\t            break;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      // x < y? Point xc to the array of the bigger number.\r\n\t      if (xLTy) {\r\n\t        t = xc;\r\n\t        xc = yc;\r\n\t        yc = t;\r\n\t        y.s = -y.s;\r\n\t      }\r\n\r\n\t      b = (j = yc.length) - (i = xc.length);\r\n\r\n\t      // Append zeros to xc if shorter.\r\n\t      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n\t      if (b > 0) for (; b--; xc[i++] = 0);\r\n\t      b = BASE - 1;\r\n\r\n\t      // Subtract yc from xc.\r\n\t      for (; j > a;) {\r\n\r\n\t        if (xc[--j] < yc[j]) {\r\n\t          for (i = j; i && !xc[--i]; xc[i] = b);\r\n\t          --xc[i];\r\n\t          xc[j] += BASE;\r\n\t        }\r\n\r\n\t        xc[j] -= yc[j];\r\n\t      }\r\n\r\n\t      // Remove leading zeros and adjust exponent accordingly.\r\n\t      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n\t      // Zero?\r\n\t      if (!xc[0]) {\r\n\r\n\t        // Following IEEE 754 (2008) 6.3,\r\n\t        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n\t        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n\t        y.c = [y.e = 0];\r\n\t        return y;\r\n\t      }\r\n\r\n\t      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n\t      // for finite x and y.\r\n\t      return normalise(y, xc, ye);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *   n % 0 =  N\r\n\t     *   n % N =  N\r\n\t     *   n % I =  n\r\n\t     *   0 % n =  0\r\n\t     *  -0 % n = -0\r\n\t     *   0 % 0 =  N\r\n\t     *   0 % N =  N\r\n\t     *   0 % I =  0\r\n\t     *   N % n =  N\r\n\t     *   N % 0 =  N\r\n\t     *   N % N =  N\r\n\t     *   N % I =  N\r\n\t     *   I % n =  N\r\n\t     *   I % 0 =  N\r\n\t     *   I % N =  N\r\n\t     *   I % I =  N\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n\t     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n\t     */\r\n\t    P.modulo = P.mod = function (y, b) {\r\n\t      var q, s,\r\n\t        x = this;\r\n\r\n\t      y = new BigNumber(y, b);\r\n\r\n\t      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n\t      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n\t        return new BigNumber(NaN);\r\n\r\n\t      // Return x if y is Infinity or x is zero.\r\n\t      } else if (!y.c || x.c && !x.c[0]) {\r\n\t        return new BigNumber(x);\r\n\t      }\r\n\r\n\t      if (MODULO_MODE == 9) {\r\n\r\n\t        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n\t        // r = x - qy    where  0 <= r < abs(y)\r\n\t        s = y.s;\r\n\t        y.s = 1;\r\n\t        q = div(x, y, 0, 3);\r\n\t        y.s = s;\r\n\t        q.s *= s;\r\n\t      } else {\r\n\t        q = div(x, y, 0, MODULO_MODE);\r\n\t      }\r\n\r\n\t      y = x.minus(q.times(y));\r\n\r\n\t      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n\t      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n\t      return y;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n * 0 = 0\r\n\t     *  n * N = N\r\n\t     *  n * I = I\r\n\t     *  0 * n = 0\r\n\t     *  0 * 0 = 0\r\n\t     *  0 * N = N\r\n\t     *  0 * I = N\r\n\t     *  N * n = N\r\n\t     *  N * 0 = N\r\n\t     *  N * N = N\r\n\t     *  N * I = N\r\n\t     *  I * n = I\r\n\t     *  I * 0 = N\r\n\t     *  I * N = N\r\n\t     *  I * I = I\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n\t     * of BigNumber(y, b).\r\n\t     */\r\n\t    P.multipliedBy = P.times = function (y, b) {\r\n\t      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n\t        base, sqrtBase,\r\n\t        x = this,\r\n\t        xc = x.c,\r\n\t        yc = (y = new BigNumber(y, b)).c;\r\n\r\n\t      // Either NaN, ±Infinity or ±0?\r\n\t      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n\t        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n\t        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n\t          y.c = y.e = y.s = null;\r\n\t        } else {\r\n\t          y.s *= x.s;\r\n\r\n\t          // Return ±Infinity if either is ±Infinity.\r\n\t          if (!xc || !yc) {\r\n\t            y.c = y.e = null;\r\n\r\n\t          // Return ±0 if either is ±0.\r\n\t          } else {\r\n\t            y.c = [0];\r\n\t            y.e = 0;\r\n\t          }\r\n\t        }\r\n\r\n\t        return y;\r\n\t      }\r\n\r\n\t      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n\t      y.s *= x.s;\r\n\t      xcL = xc.length;\r\n\t      ycL = yc.length;\r\n\r\n\t      // Ensure xc points to longer array and xcL to its length.\r\n\t      if (xcL < ycL) {\r\n\t        zc = xc;\r\n\t        xc = yc;\r\n\t        yc = zc;\r\n\t        i = xcL;\r\n\t        xcL = ycL;\r\n\t        ycL = i;\r\n\t      }\r\n\r\n\t      // Initialise the result array with zeros.\r\n\t      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n\t      base = BASE;\r\n\t      sqrtBase = SQRT_BASE;\r\n\r\n\t      for (i = ycL; --i >= 0;) {\r\n\t        c = 0;\r\n\t        ylo = yc[i] % sqrtBase;\r\n\t        yhi = yc[i] / sqrtBase | 0;\r\n\r\n\t        for (k = xcL, j = i + k; j > i;) {\r\n\t          xlo = xc[--k] % sqrtBase;\r\n\t          xhi = xc[k] / sqrtBase | 0;\r\n\t          m = yhi * xlo + xhi * ylo;\r\n\t          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n\t          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n\t          zc[j--] = xlo % base;\r\n\t        }\r\n\r\n\t        zc[j] = c;\r\n\t      }\r\n\r\n\t      if (c) {\r\n\t        ++e;\r\n\t      } else {\r\n\t        zc.splice(0, 1);\r\n\t      }\r\n\r\n\t      return normalise(y, zc, e);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n\t     * i.e. multiplied by -1.\r\n\t     */\r\n\t    P.negated = function () {\r\n\t      var x = new BigNumber(this);\r\n\t      x.s = -x.s || null;\r\n\t      return x;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  n + 0 = n\r\n\t     *  n + N = N\r\n\t     *  n + I = I\r\n\t     *  0 + n = n\r\n\t     *  0 + 0 = 0\r\n\t     *  0 + N = N\r\n\t     *  0 + I = I\r\n\t     *  N + n = N\r\n\t     *  N + 0 = N\r\n\t     *  N + N = N\r\n\t     *  N + I = N\r\n\t     *  I + n = I\r\n\t     *  I + 0 = I\r\n\t     *  I + N = N\r\n\t     *  I + I = I\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n\t     * BigNumber(y, b).\r\n\t     */\r\n\t    P.plus = function (y, b) {\r\n\t      var t,\r\n\t        x = this,\r\n\t        a = x.s;\r\n\r\n\t      y = new BigNumber(y, b);\r\n\t      b = y.s;\r\n\r\n\t      // Either NaN?\r\n\t      if (!a || !b) return new BigNumber(NaN);\r\n\r\n\t      // Signs differ?\r\n\t       if (a != b) {\r\n\t        y.s = -b;\r\n\t        return x.minus(y);\r\n\t      }\r\n\r\n\t      var xe = x.e / LOG_BASE,\r\n\t        ye = y.e / LOG_BASE,\r\n\t        xc = x.c,\r\n\t        yc = y.c;\r\n\r\n\t      if (!xe || !ye) {\r\n\r\n\t        // Return ±Infinity if either ±Infinity.\r\n\t        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n\t        // Either zero?\r\n\t        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n\t        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n\t      }\r\n\r\n\t      xe = bitFloor(xe);\r\n\t      ye = bitFloor(ye);\r\n\t      xc = xc.slice();\r\n\r\n\t      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n\t      if (a = xe - ye) {\r\n\t        if (a > 0) {\r\n\t          ye = xe;\r\n\t          t = yc;\r\n\t        } else {\r\n\t          a = -a;\r\n\t          t = xc;\r\n\t        }\r\n\r\n\t        t.reverse();\r\n\t        for (; a--; t.push(0));\r\n\t        t.reverse();\r\n\t      }\r\n\r\n\t      a = xc.length;\r\n\t      b = yc.length;\r\n\r\n\t      // Point xc to the longer array, and b to the shorter length.\r\n\t      if (a - b < 0) {\r\n\t        t = yc;\r\n\t        yc = xc;\r\n\t        xc = t;\r\n\t        b = a;\r\n\t      }\r\n\r\n\t      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n\t      for (a = 0; b;) {\r\n\t        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n\t        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n\t      }\r\n\r\n\t      if (a) {\r\n\t        xc = [a].concat(xc);\r\n\t        ++ye;\r\n\t      }\r\n\r\n\t      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\t      // ye = MAX_EXP + 1 possible\r\n\t      return normalise(y, xc, ye);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * If sd is undefined or null or true or false, return the number of significant digits of\r\n\t     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n\t     * If sd is true include integer-part trailing zeros in the count.\r\n\t     *\r\n\t     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n\t     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n\t     * ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n\t     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n\t     */\r\n\t    P.precision = P.sd = function (sd, rm) {\r\n\t      var c, n, v,\r\n\t        x = this;\r\n\r\n\t      if (sd != null && sd !== !!sd) {\r\n\t        intCheck(sd, 1, MAX);\r\n\t        if (rm == null) rm = ROUNDING_MODE;\r\n\t        else intCheck(rm, 0, 8);\r\n\r\n\t        return round(new BigNumber(x), sd, rm);\r\n\t      }\r\n\r\n\t      if (!(c = x.c)) return null;\r\n\t      v = c.length - 1;\r\n\t      n = v * LOG_BASE + 1;\r\n\r\n\t      if (v = c[v]) {\r\n\r\n\t        // Subtract the number of trailing zeros of the last element.\r\n\t        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n\t        // Add the number of digits of the first element.\r\n\t        for (v = c[0]; v >= 10; v /= 10, n++);\r\n\t      }\r\n\r\n\t      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n\t      return n;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n\t     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n\t     *\r\n\t     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n\t     */\r\n\t    P.shiftedBy = function (k) {\r\n\t      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n\t      return this.times('1e' + k);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     *  sqrt(-n) =  N\r\n\t     *  sqrt(N) =  N\r\n\t     *  sqrt(-I) =  N\r\n\t     *  sqrt(I) =  I\r\n\t     *  sqrt(0) =  0\r\n\t     *  sqrt(-0) = -0\r\n\t     *\r\n\t     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n\t     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n\t     */\r\n\t    P.squareRoot = P.sqrt = function () {\r\n\t      var m, n, r, rep, t,\r\n\t        x = this,\r\n\t        c = x.c,\r\n\t        s = x.s,\r\n\t        e = x.e,\r\n\t        dp = DECIMAL_PLACES + 4,\r\n\t        half = new BigNumber('0.5');\r\n\r\n\t      // Negative/NaN/Infinity/zero?\r\n\t      if (s !== 1 || !c || !c[0]) {\r\n\t        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n\t      }\r\n\r\n\t      // Initial estimate.\r\n\t      s = Math.sqrt(+valueOf(x));\r\n\r\n\t      // Math.sqrt underflow/overflow?\r\n\t      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n\t      if (s == 0 || s == 1 / 0) {\r\n\t        n = coeffToString(c);\r\n\t        if ((n.length + e) % 2 == 0) n += '0';\r\n\t        s = Math.sqrt(+n);\r\n\t        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n\t        if (s == 1 / 0) {\r\n\t          n = '5e' + e;\r\n\t        } else {\r\n\t          n = s.toExponential();\r\n\t          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n\t        }\r\n\r\n\t        r = new BigNumber(n);\r\n\t      } else {\r\n\t        r = new BigNumber(s + '');\r\n\t      }\r\n\r\n\t      // Check for zero.\r\n\t      // r could be zero if MIN_EXP is changed after the this value was created.\r\n\t      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n\t      // coeffToString to throw.\r\n\t      if (r.c[0]) {\r\n\t        e = r.e;\r\n\t        s = e + dp;\r\n\t        if (s < 3) s = 0;\r\n\r\n\t        // Newton-Raphson iteration.\r\n\t        for (; ;) {\r\n\t          t = r;\r\n\t          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n\t          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n\t            // The exponent of r may here be one less than the final result exponent,\r\n\t            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n\t            // are indexed correctly.\r\n\t            if (r.e < e) --s;\r\n\t            n = n.slice(s - 3, s + 1);\r\n\r\n\t            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n\t            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n\t            // iteration.\r\n\t            if (n == '9999' || !rep && n == '4999') {\r\n\r\n\t              // On the first iteration only, check to see if rounding up gives the\r\n\t              // exact result as the nines may infinitely repeat.\r\n\t              if (!rep) {\r\n\t                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n\t                if (t.times(t).eq(x)) {\r\n\t                  r = t;\r\n\t                  break;\r\n\t                }\r\n\t              }\r\n\r\n\t              dp += 4;\r\n\t              s += 4;\r\n\t              rep = 1;\r\n\t            } else {\r\n\r\n\t              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n\t              // result. If not, then there are further digits and m will be truthy.\r\n\t              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n\t                // Truncate to the first rounding digit.\r\n\t                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n\t                m = !r.times(r).eq(x);\r\n\t              }\r\n\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t      }\r\n\r\n\t      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in exponential notation and\r\n\t     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     */\r\n\t    P.toExponential = function (dp, rm) {\r\n\t      if (dp != null) {\r\n\t        intCheck(dp, 0, MAX);\r\n\t        dp++;\r\n\t      }\r\n\t      return format(this, dp, rm, 1);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n\t     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n\t     *\r\n\t     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n\t     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     */\r\n\t    P.toFixed = function (dp, rm) {\r\n\t      if (dp != null) {\r\n\t        intCheck(dp, 0, MAX);\r\n\t        dp = dp + this.e + 1;\r\n\t      }\r\n\t      return format(this, dp, rm);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n\t     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n\t     * of the format or FORMAT object (see BigNumber.set).\r\n\t     *\r\n\t     * The formatting object may contain some or all of the properties shown below.\r\n\t     *\r\n\t     * FORMAT = {\r\n\t     *   prefix: '',\r\n\t     *   groupSize: 3,\r\n\t     *   secondaryGroupSize: 0,\r\n\t     *   groupSeparator: ',',\r\n\t     *   decimalSeparator: '.',\r\n\t     *   fractionGroupSize: 0,\r\n\t     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n\t     *   suffix: ''\r\n\t     * };\r\n\t     *\r\n\t     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     * [format] {object} Formatting options. See FORMAT pbject above.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n\t     * '[BigNumber Error] Argument not an object: {format}'\r\n\t     */\r\n\t    P.toFormat = function (dp, rm, format) {\r\n\t      var str,\r\n\t        x = this;\r\n\r\n\t      if (format == null) {\r\n\t        if (dp != null && rm && typeof rm == 'object') {\r\n\t          format = rm;\r\n\t          rm = null;\r\n\t        } else if (dp && typeof dp == 'object') {\r\n\t          format = dp;\r\n\t          dp = rm = null;\r\n\t        } else {\r\n\t          format = FORMAT;\r\n\t        }\r\n\t      } else if (typeof format != 'object') {\r\n\t        throw Error\r\n\t          (bignumberError + 'Argument not an object: ' + format);\r\n\t      }\r\n\r\n\t      str = x.toFixed(dp, rm);\r\n\r\n\t      if (x.c) {\r\n\t        var i,\r\n\t          arr = str.split('.'),\r\n\t          g1 = +format.groupSize,\r\n\t          g2 = +format.secondaryGroupSize,\r\n\t          groupSeparator = format.groupSeparator || '',\r\n\t          intPart = arr[0],\r\n\t          fractionPart = arr[1],\r\n\t          isNeg = x.s < 0,\r\n\t          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n\t          len = intDigits.length;\r\n\r\n\t        if (g2) {\r\n\t          i = g1;\r\n\t          g1 = g2;\r\n\t          g2 = i;\r\n\t          len -= i;\r\n\t        }\r\n\r\n\t        if (g1 > 0 && len > 0) {\r\n\t          i = len % g1 || g1;\r\n\t          intPart = intDigits.substr(0, i);\r\n\t          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n\t          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n\t          if (isNeg) intPart = '-' + intPart;\r\n\t        }\r\n\r\n\t        str = fractionPart\r\n\t         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n\t          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n\t           '$&' + (format.fractionGroupSeparator || ''))\r\n\t          : fractionPart)\r\n\t         : intPart;\r\n\t      }\r\n\r\n\t      return (format.prefix || '') + str + (format.suffix || '');\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n\t     * fraction with an integer numerator and an integer denominator.\r\n\t     * The denominator will be a positive non-zero value less than or equal to the specified\r\n\t     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n\t     * the lowest value necessary to represent the number exactly.\r\n\t     *\r\n\t     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n\t     */\r\n\t    P.toFraction = function (md) {\r\n\t      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n\t        x = this,\r\n\t        xc = x.c;\r\n\r\n\t      if (md != null) {\r\n\t        n = new BigNumber(md);\r\n\r\n\t        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n\t        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n\t          throw Error\r\n\t            (bignumberError + 'Argument ' +\r\n\t              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n\t        }\r\n\t      }\r\n\r\n\t      if (!xc) return new BigNumber(x);\r\n\r\n\t      d = new BigNumber(ONE);\r\n\t      n1 = d0 = new BigNumber(ONE);\r\n\t      d1 = n0 = new BigNumber(ONE);\r\n\t      s = coeffToString(xc);\r\n\r\n\t      // Determine initial denominator.\r\n\t      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n\t      e = d.e = s.length - x.e - 1;\r\n\t      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n\t      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n\t      exp = MAX_EXP;\r\n\t      MAX_EXP = 1 / 0;\r\n\t      n = new BigNumber(s);\r\n\r\n\t      // n0 = d1 = 0\r\n\t      n0.c[0] = 0;\r\n\r\n\t      for (; ;)  {\r\n\t        q = div(n, d, 0, 1);\r\n\t        d2 = d0.plus(q.times(d1));\r\n\t        if (d2.comparedTo(md) == 1) break;\r\n\t        d0 = d1;\r\n\t        d1 = d2;\r\n\t        n1 = n0.plus(q.times(d2 = n1));\r\n\t        n0 = d2;\r\n\t        d = n.minus(q.times(d2 = d));\r\n\t        n = d2;\r\n\t      }\r\n\r\n\t      d2 = div(md.minus(d0), d1, 0, 1);\r\n\t      n0 = n0.plus(d2.times(n1));\r\n\t      d0 = d0.plus(d2.times(d1));\r\n\t      n0.s = n1.s = x.s;\r\n\t      e = e * 2;\r\n\r\n\t      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n\t      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n\t          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n\t      MAX_EXP = exp;\r\n\r\n\t      return r;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return the value of this BigNumber converted to a number primitive.\r\n\t     */\r\n\t    P.toNumber = function () {\r\n\t      return +valueOf(this);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n\t     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n\t     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n\t     * exponential notation.\r\n\t     *\r\n\t     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n\t     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n\t     */\r\n\t    P.toPrecision = function (sd, rm) {\r\n\t      if (sd != null) intCheck(sd, 1, MAX);\r\n\t      return format(this, sd, rm, 2);\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n\t     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n\t     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n\t     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n\t     * TO_EXP_NEG, return exponential notation.\r\n\t     *\r\n\t     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n\t     *\r\n\t     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n\t     */\r\n\t    P.toString = function (b) {\r\n\t      var str,\r\n\t        n = this,\r\n\t        s = n.s,\r\n\t        e = n.e;\r\n\r\n\t      // Infinity or NaN?\r\n\t      if (e === null) {\r\n\t        if (s) {\r\n\t          str = 'Infinity';\r\n\t          if (s < 0) str = '-' + str;\r\n\t        } else {\r\n\t          str = 'NaN';\r\n\t        }\r\n\t      } else {\r\n\t        if (b == null) {\r\n\t          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n\t           ? toExponential(coeffToString(n.c), e)\r\n\t           : toFixedPoint(coeffToString(n.c), e, '0');\r\n\t        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n\t          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n\t          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n\t        } else {\r\n\t          intCheck(b, 2, ALPHABET.length, 'Base');\r\n\t          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n\t        }\r\n\r\n\t        if (s < 0 && n.c[0]) str = '-' + str;\r\n\t      }\r\n\r\n\t      return str;\r\n\t    };\r\n\r\n\r\n\t    /*\r\n\t     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n\t     * negative zero.\r\n\t     */\r\n\t    P.valueOf = P.toJSON = function () {\r\n\t      return valueOf(this);\r\n\t    };\r\n\r\n\r\n\t    P._isBigNumber = true;\r\n\r\n\t    if (configObject != null) BigNumber.set(configObject);\r\n\r\n\t    return BigNumber;\r\n\t  }\r\n\r\n\r\n\t  // PRIVATE HELPER FUNCTIONS\r\n\r\n\t  // These functions don't need access to variables,\r\n\t  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n\t  function bitFloor(n) {\r\n\t    var i = n | 0;\r\n\t    return n > 0 || n === i ? i : i - 1;\r\n\t  }\r\n\r\n\r\n\t  // Return a coefficient array as a string of base 10 digits.\r\n\t  function coeffToString(a) {\r\n\t    var s, z,\r\n\t      i = 1,\r\n\t      j = a.length,\r\n\t      r = a[0] + '';\r\n\r\n\t    for (; i < j;) {\r\n\t      s = a[i++] + '';\r\n\t      z = LOG_BASE - s.length;\r\n\t      for (; z--; s = '0' + s);\r\n\t      r += s;\r\n\t    }\r\n\r\n\t    // Determine trailing zeros.\r\n\t    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n\t    return r.slice(0, j + 1 || 1);\r\n\t  }\r\n\r\n\r\n\t  // Compare the value of BigNumbers x and y.\r\n\t  function compare(x, y) {\r\n\t    var a, b,\r\n\t      xc = x.c,\r\n\t      yc = y.c,\r\n\t      i = x.s,\r\n\t      j = y.s,\r\n\t      k = x.e,\r\n\t      l = y.e;\r\n\r\n\t    // Either NaN?\r\n\t    if (!i || !j) return null;\r\n\r\n\t    a = xc && !xc[0];\r\n\t    b = yc && !yc[0];\r\n\r\n\t    // Either zero?\r\n\t    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n\t    // Signs differ?\r\n\t    if (i != j) return i;\r\n\r\n\t    a = i < 0;\r\n\t    b = k == l;\r\n\r\n\t    // Either Infinity?\r\n\t    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n\t    // Compare exponents.\r\n\t    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n\t    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n\t    // Compare digit by digit.\r\n\t    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n\t    // Compare lengths.\r\n\t    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n\t  }\r\n\r\n\r\n\t  /*\r\n\t   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n\t   */\r\n\t  function intCheck(n, min, max, name) {\r\n\t    if (n < min || n > max || n !== mathfloor(n)) {\r\n\t      throw Error\r\n\t       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n\t         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n\t         : ' not a primitive number: ') + String(n));\r\n\t    }\r\n\t  }\r\n\r\n\r\n\t  // Assumes finite n.\r\n\t  function isOdd(n) {\r\n\t    var k = n.c.length - 1;\r\n\t    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n\t  }\r\n\r\n\r\n\t  function toExponential(str, e) {\r\n\t    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n\t     (e < 0 ? 'e' : 'e+') + e;\r\n\t  }\r\n\r\n\r\n\t  function toFixedPoint(str, e, z) {\r\n\t    var len, zs;\r\n\r\n\t    // Negative exponent?\r\n\t    if (e < 0) {\r\n\r\n\t      // Prepend zeros.\r\n\t      for (zs = z + '.'; ++e; zs += z);\r\n\t      str = zs + str;\r\n\r\n\t    // Positive exponent\r\n\t    } else {\r\n\t      len = str.length;\r\n\r\n\t      // Append zeros.\r\n\t      if (++e > len) {\r\n\t        for (zs = z, e -= len; --e; zs += z);\r\n\t        str += zs;\r\n\t      } else if (e < len) {\r\n\t        str = str.slice(0, e) + '.' + str.slice(e);\r\n\t      }\r\n\t    }\r\n\r\n\t    return str;\r\n\t  }\r\n\r\n\r\n\t  // EXPORT\r\n\r\n\r\n\t  BigNumber = clone();\r\n\t  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\t  // AMD.\r\n\t  if (module.exports) {\r\n\t    module.exports = BigNumber;\r\n\r\n\t  // Browser.\r\n\t  } else {\r\n\t    if (!globalObject) {\r\n\t      globalObject = typeof self != 'undefined' && self ? self : window;\r\n\t    }\r\n\r\n\t    globalObject.BigNumber = BigNumber;\r\n\t  }\r\n\t})(commonjsGlobal); \n} (bignumber));\n\nvar bignumberExports = bignumber.exports;\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState$1 = requireGlobalState();\nconst validating = requireValidating();\nconst parsing$1 = parsing$2;\nconst BigNumber$1 = bignumberExports;\n\nconst powers = {\n    trillion: Math.pow(10, 12),\n    billion: Math.pow(10, 9),\n    million: Math.pow(10, 6),\n    thousand: Math.pow(10, 3)\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false,\n    roundingFunction: Math.round,\n    spaceSeparatedAbbreviation: false\n};\n\nconst { binarySuffixes, decimalSuffixes } = globalState$1.currentBytes();\n\nconst bytes = {\n    general: { scale: 1024, suffixes: decimalSuffixes, marker: \"bd\" },\n    binary: { scale: 1024, suffixes: binarySuffixes, marker: \"b\" },\n    decimal: { scale: 1000, suffixes: decimalSuffixes, marker: \"d\" }\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing$1.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState$1);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState$1, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState$1, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentTimeDefaultFormat());\n            return formatTime(instance);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState$1.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState$1);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return { value, suffix };\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    const { binarySuffixes: localBinarySuffixes, decimalSuffixes: localDecimalSuffixes } = state.currentBytes();\n\n    const localBytes = {\n        general: { scale: 1024, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"bd\" },\n        binary: { scale: 1024, suffixes: localBinarySuffixes || binarySuffixes, marker: \"b\" },\n        decimal: { scale: 1000, suffixes: localDecimalSuffixes || decimalSuffixes, marker: \"d\" }\n    };\n    let baseInfo = localBytes[base];\n\n    let { value, suffix } = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let clonedFormat = Object.assign({}, providedFormat);\n    let options = Object.assign({}, defaultOptions, clonedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = clonedFormat.currencyPosition || currentCurrency.position;\n    let symbol = clonedFormat.currencySymbol || currentCurrency.symbol;\n    const spaceSeparatedCurrency = options.spaceSeparatedCurrency !== void 0\n        ? options.spaceSeparatedCurrency : options.spaceSeparated;\n\n    if (clonedFormat.lowPrecision === undefined) {\n        clonedFormat.lowPrecision = false;\n    }\n\n    if (spaceSeparatedCurrency) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat: clonedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else if (instance._value > 0 && options.forceSign) {\n            output = `+${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = !options.spaceSeparatedAbbreviation && average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {boolean} [lowPrecision=true] - reduce average precision\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @param {function} roundingFunction - function used to round numbers\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({ value, forceAverage, lowPrecision = true, abbreviations, spaceSeparated = false, totalLength = 0, roundingFunction = Math.round }) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if (forceAverage && abbreviations[forceAverage] && powers[forceAverage]) {\n        abbreviation = abbreviations[forceAverage];\n        value = value / powers[forceAverage];\n    } else {\n        if (abs >= powers.trillion || (lowPrecision && roundingFunction(abs / powers.trillion) === 1)) {\n            // trillion\n            abbreviation = abbreviations.trillion;\n            value = value / powers.trillion;\n        } else if (abs < powers.trillion && abs >= powers.billion || (lowPrecision && roundingFunction(abs / powers.billion) === 1)) {\n            // billion\n            abbreviation = abbreviations.billion;\n            value = value / powers.billion;\n        } else if (abs < powers.billion && abs >= powers.million || (lowPrecision && roundingFunction(abs / powers.million) === 1)) {\n            // million\n            abbreviation = abbreviations.million;\n            value = value / powers.million;\n        } else if (abs < powers.million && abs >= powers.thousand || (lowPrecision && roundingFunction(abs / powers.thousand) === 1)) {\n            // thousand\n            abbreviation = abbreviations.thousand;\n            value = value / powers.thousand;\n        }\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let isNegative = value < 0;\n        let characteristic = value.toString().split(\".\")[0];\n\n        let characteristicLength = isNegative\n            ? characteristic.length - 1\n            : characteristic.length;\n\n        mantissaPrecision = Math.max(totalLength - characteristicLength, 0);\n    }\n\n    return { value, abbreviation, mantissaPrecision };\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({ value, characteristicPrecision }) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @param {function} roundingFunction - rounding function to be used\n * @return {string}\n */\nfunction toFixed(value, precision, roundingFunction = Math.round) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    const n = new BigNumber$1(roundingFunction(+`${value}e+${precision}`) / (Math.pow(10, precision)));\n    return n.toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim, roundingFunction) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision, roundingFunction);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    const hasNegativeSign = value < 0 && currentCharacteristic.indexOf(\"-\") === 0;\n    if (hasNegativeSign) {\n            // Remove the negative sign\n            currentCharacteristic = currentCharacteristic.slice(1);\n            result = result.slice(1);\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    if (hasNegativeSign) {\n        // Add back the minus sign\n        result = `-${result}`;\n    }\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n    const hasNegativeSign = value < 0 && characteristic.indexOf(\"-\") === 0;\n\n    if (thousandSeparated) {\n        if (hasNegativeSign) {\n            // Remove the negative sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (hasNegativeSign) {\n            // Add back the negative sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({ instance, providedFormat, state = globalState$1, decimalSeparator, defaults = state.currentDefaults() }) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let lowPrecision = options.lowPrecision;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n    let roundingFunction = options.roundingFunction;\n\n    let abbreviation = \"\";\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            lowPrecision,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated,\n            roundingFunction,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa, roundingFunction);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nvar formatting = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = bignumberExports;\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nvar manipulating = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro),\n    BigNumber: BigNumber\n});\n\n/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.5.0\";\n\nconst globalState = requireGlobalState();\nconst validator = requireValidating();\nconst loader = loading(numbro);\nconst unformatter = requireUnformatting();\nlet formatter = formatting(numbro);\nlet manipulate = manipulating(numbro);\nconst parsing = parsing$2;\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\nnumbro.BigNumber = manipulate.BigNumber;\n\nvar numbro_1 = numbro;\n\nvar numbro$1 = /*@__PURE__*/getDefaultExportFromCjs(numbro_1);\n\nexport { numbro$1 as default };\n"],
  "mappings": "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",
  "names": ["format", "globalState", "unformatter", "enUS", "validating", "parsing", "numbro", "BigNumber", "multiply", "compare", "subtract"]
}
